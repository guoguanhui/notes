(window.webpackJsonp=window.webpackJsonp||[]).push([[188],{743:function(t,r,a){"use strict";a.r(r);var s=a(14),_=Object(s.a)({},(function(){var t=this,r=t.$createElement,a=t._self._c||r;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"简单工厂"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#简单工厂"}},[t._v("#")]),t._v(" 简单工厂")]),t._v(" "),a("h3",{attrs:{id:"总览"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总览"}},[t._v("#")]),t._v(" 总览")]),t._v(" "),a("p",[t._v("该设计模式意图在创建一个对象时不向客户暴露内部细节，并提供一个创建对象的通用接口。")]),t._v(" "),a("p",[t._v("简单工厂不是设计模式，更像是一种编程习惯。"),a("strong",[t._v("它把实例化的操作单独放到一个类中，这个类就成为简单工厂类，让简单工厂类来决定应该用哪个具体子类来实例化")]),t._v("。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://walegarrett-image-1304556108.cos.ap-chengdu.myqcloud.com/markdown_img/202203280958259.png",alt:"img"}})]),t._v(" "),a("h2",{attrs:{id:"工厂方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#工厂方法"}},[t._v("#")]),t._v(" 工厂方法")]),t._v(" "),a("h3",{attrs:{id:"总览-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总览-2"}},[t._v("#")]),t._v(" 总览")]),t._v(" "),a("p",[t._v("该设计模式"),a("strong",[t._v("定义了一个创建对象的接口，但由子类决定要实例化哪个类")]),t._v("。工厂方法把实例化操作推迟到子类。")]),t._v(" "),a("p",[a("strong",[t._v("在简单工厂中，创建对象的是另一个类，而在工厂方法中，是由子类来创建对象")]),t._v("。")]),t._v(" "),a("p",[t._v("下图中，Factory 有一个 doSomething() 方法，这个方法需要用到一个产品对象，这个产品对象由 factoryMethod() 方法创建。"),a("strong",[t._v("该方法是抽象的，需要由子类去实现（但是在简单工厂模式中，Factory并没有子类，创建ConcreteProduct由自身完成）")]),t._v("。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://walegarrett-image-1304556108.cos.ap-chengdu.myqcloud.com/markdown_img/202203282240254.png",alt:"img"}})]),t._v(" "),a("h2",{attrs:{id:"抽象工厂"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#抽象工厂"}},[t._v("#")]),t._v(" 抽象工厂")]),t._v(" "),a("h3",{attrs:{id:"总览-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总览-3"}},[t._v("#")]),t._v(" 总览")]),t._v(" "),a("p",[t._v("抽象工厂模式提供一个接口，用于创建 "),a("strong",[t._v("相关的对象家族")]),t._v(" 。")]),t._v(" "),a("p",[t._v("抽象工厂模式创建的是"),a("strong",[t._v("对象家族，也就是很多类对象而不是一类对象，并且这些对象是相关的，也就是说必须一起创建出来")]),t._v("。而"),a("strong",[t._v("工厂方法模式只是用于创建一类对象，这和抽象工厂模式有很大不同")]),t._v("。")]),t._v(" "),a("p",[a("strong",[t._v("抽象工厂模式用到了工厂方法模式来创建单一对象，AbstractFactory 中的 createProductA() 和 createProductB() 方法都是让子类来实现")]),t._v("，这两个方法单独来看就是在创建一个对象，这符合工厂方法模式的定义。")]),t._v(" "),a("p",[t._v("至于创建对象的家族这一概念是在 Client 体现，"),a("strong",[t._v("Client 要通过 AbstractFactory 同时调用两个方法来创建出两个对象")]),t._v("，在这里这两个对象就有很大的相关性，Client 需要同时创建出这两个对象。")]),t._v(" "),a("p",[t._v("从高层次来看，"),a("strong",[t._v("抽象工厂使用了组合")]),t._v("，即 Cilent 组合了 AbstractFactory，而"),a("strong",[t._v("工厂方法模式使用了继承")]),t._v("。")])])}),[],!1,null,null,null);r.default=_.exports}}]);