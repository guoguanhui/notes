(window.webpackJsonp=window.webpackJsonp||[]).push([[179],{733:function(t,a,_){"use strict";_.r(a);var v=_(14),r=Object(v.a)({},(function(){var t=this,a=t.$createElement,_=t._self._c||a;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h2",{attrs:{id:"解析url生成http请求"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#解析url生成http请求"}},[t._v("#")]),t._v(" 解析URL生成HTTP请求")]),t._v(" "),_("ol",[_("li",[t._v("首先浏览器做的第一步工作就是要对 URL 进行解析，从而产生发送给 Web 服务器的请求信息。")])]),t._v(" "),_("p",[_("img",{attrs:{src:"https://walegarrett-image-1304556108.cos.ap-chengdu.myqcloud.com/markdown_img/202203282239817.png",alt:"img"}})]),t._v(" "),_("ol",{attrs:{start:"2"}},[_("li",[t._v("对 URL 进行解析之后，浏览器确定了 Web 服务器和文件名，接下来就是根据这些信息来生成 HTTP 请求消息了。")])]),t._v(" "),_("p",[_("img",{attrs:{src:"https://walegarrett-image-1304556108.cos.ap-chengdu.myqcloud.com/markdown_img/202203271702777.png",alt:"img"}})]),t._v(" "),_("h2",{attrs:{id:"域名解析-dns"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#域名解析-dns"}},[t._v("#")]),t._v(" 域名解析-DNS")]),t._v(" "),_("p",[t._v("通过浏览器解析 URL 并生成 HTTP 消息后，需要"),_("strong",[t._v("委托操作系统将消息发送给")]),t._v(" "),_("strong",[t._v("Web")]),t._v(" "),_("strong",[t._v("服务器")]),t._v("。")]),t._v(" "),_("p",[t._v("但在发送之前，还有一项工作需要完成，那就是"),_("strong",[t._v("查询服务器域名对应的 IP 地址")]),t._v("，因为委托操作系统发送消息时，必须提供通信对象的 IP 地址。所以，有一种服务器就专门保存了 Web 服务器域名与 IP 的对应关系，它就是 DNS 服务器。")]),t._v(" "),_("p",[t._v("其实，在发送DNS查询之前，浏览器会根据输入的URL地址，去查找域名是否被本地DNS缓存，不同"),_("strong",[t._v("浏览器")]),t._v("对DNS的设置不同，如果浏览器缓存了想访问的URL地址，那就直接返回IP地址。如果没有缓存，浏览器就会"),_("strong",[t._v("发起系统调用来查询本机hosts文件")]),t._v("是否有配置ip地址，如果找到，直接返回。如果找不到，就向网络中发起一个DNS域名解析请求。")]),t._v(" "),_("p",[t._v("域名解析的工作流程")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://walegarrett-image-1304556108.cos.ap-chengdu.myqcloud.com/markdown_img/202203271702670.png",alt:"img"}})]),t._v(" "),_("p",[t._v("DNS 域名解析的过程蛮有意思的，整个过程就和我们日常生活中找人问路的过程类似，"),_("strong",[t._v("只指路不带路")]),t._v("，这是一种"),_("strong",[t._v("迭代查询")]),t._v("的方式。还有一种"),_("strong",[t._v("递归查询")]),t._v("方式，但是这种方式只有根域名服务器无法告知本地DNS服务器下一步需要访问哪个顶级域名服务器时才会使用。")]),t._v(" "),_("h2",{attrs:{id:"建立tcp连接"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#建立tcp连接"}},[t._v("#")]),t._v(" 建立TCP连接")]),t._v(" "),_("p",[t._v("HTTP 是基于 TCP 协议传输的，所以客户机需要和目标服务器建立TCP连接，这里要经过三次握手的过程。")]),t._v(" "),_("h3",{attrs:{id:"三次握手"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#三次握手"}},[t._v("#")]),t._v(" 三次握手")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://walegarrett-image-1304556108.cos.ap-chengdu.myqcloud.com/markdown_img/202203282239012.png",alt:"img"}})]),t._v(" "),_("h3",{attrs:{id:"tcp分割数据"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#tcp分割数据"}},[t._v("#")]),t._v(" TCP分割数据")]),t._v(" "),_("p",[t._v("如果 HTTP 请求消息比较长，超过了 MSS 的长度，这时 TCP 就需要把 HTTP 的数据拆解一块块的数据发送，而不是一次性发送所有数据。")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://walegarrett-image-1304556108.cos.ap-chengdu.myqcloud.com/markdown_img/202203271702554.png",alt:"img"}})]),t._v(" "),_("ul",[_("li",[_("p",[t._v("MTU：一个网络包的最大长度，以太网中一般为 1500 字节。")])]),t._v(" "),_("li",[_("p",[t._v("MSS：除去 IP 和 TCP 头部之后，一个网络包所能容纳的 TCP 数据的最大长度。")])])]),t._v(" "),_("p",[t._v("数据会被以 MSS 的长度为单位进行拆分，拆分出来的每一块数据都会被放进单独的网络包中。也就是在每个被拆分的数据加上 TCP 头信息，然后交给 IP 模块来发送数据。")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://walegarrett-image-1304556108.cos.ap-chengdu.myqcloud.com/markdown_img/202203282239169.png",alt:"img"}})]),t._v(" "),_("h3",{attrs:{id:"tcp报文生成"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#tcp报文生成"}},[t._v("#")]),t._v(" TCP报文生成")]),t._v(" "),_("p",[t._v("TCP 协议里面会有两个端口，一个是浏览器监听的端口（通常是随机生成的），一个是 Web 服务器监听的端口（"),_("strong",[t._v("HTTP 默认端口号是")]),t._v(" "),_("strong",[t._v("80")]),t._v("**， HTTPS 默认端口号是** "),_("strong",[t._v("443")]),t._v("）。")]),t._v(" "),_("p",[t._v("在双方建立了连接后，"),_("strong",[t._v("TCP 报文中的数据部分就是存放 HTTP 头部 + 数据")]),t._v("，组装好 TCP 报文之后，就需交给下面的网络层处理。")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://walegarrett-image-1304556108.cos.ap-chengdu.myqcloud.com/markdown_img/202203271702930.png",alt:"img"}})]),t._v(" "),_("h2",{attrs:{id:"ip层"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#ip层"}},[t._v("#")]),t._v(" IP层")]),t._v(" "),_("ol",[_("li",[_("p",[t._v("TCP 模块在执行连接、收发、断开等各阶段操作时，都需要委托 IP 模块将数据封装成"),_("strong",[t._v("网络包")]),t._v("发送给通信对象。")])]),t._v(" "),_("li",[_("p",[t._v("生成了 IP 头部之后，接下来网络包还需要在 IP 头部的前面加上 "),_("strong",[t._v("MAC 头部")]),t._v("。")])])]),t._v(" "),_("h2",{attrs:{id:"网卡-数据链路层"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#网卡-数据链路层"}},[t._v("#")]),t._v(" 网卡-数据链路层")]),t._v(" "),_("ol",[_("li",[_("p",[t._v("IP 生成的网络包只是存放在内存中的一串二进制数字信息，没有办法直接发送给对方。因此，我们需要将"),_("strong",[t._v("数字信息转换为电信号")]),t._v("，才能在网线上传输，也就是说，这才是真正的数据发送过程。")])]),t._v(" "),_("li",[_("p",[t._v("负责执行这一操作的是"),_("strong",[t._v("网卡")]),t._v("，要控制网卡还需要靠"),_("strong",[t._v("网卡驱动程序")]),t._v("。")])]),t._v(" "),_("li",[_("p",[t._v("网卡驱动从 IP 模块获取到包之后，会将其"),_("strong",[t._v("复制")]),t._v("到网卡内的缓存区中，接着会其"),_("strong",[t._v("开头加上报头和起始帧分界符，在末尾加上用于检测错误的帧校验序列")]),t._v("。")])])]),t._v(" "),_("p",[_("img",{attrs:{src:"https://walegarrett-image-1304556108.cos.ap-chengdu.myqcloud.com/markdown_img/202203271702891.png",alt:"img"}})]),t._v(" "),_("ol",{attrs:{start:"4"}},[_("li",[t._v("最后网卡会将包转为电信号，通过网线发送出去。")])]),t._v(" "),_("h2",{attrs:{id:"路由器"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#路由器"}},[t._v("#")]),t._v(" 路由器")]),t._v(" "),_("p",[t._v("在网络包传输的过程中，"),_("strong",[t._v("源 IP 和目标 IP 始终是不会变的，一直变化的是 MAC 地址")]),t._v("，因为需要 MAC 地址在以太网内进行"),_("strong",[t._v("两个设备")]),t._v("之间的包传输。")]),t._v(" "),_("h2",{attrs:{id:"服务端接收数据包"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#服务端接收数据包"}},[t._v("#")]),t._v(" 服务端接收数据包")]),t._v(" "),_("ol",[_("li",[_("p",[t._v("数据包抵达服务器后，服务器会先扒开数据包的 MAC 头部，查看是否和服务器自己的 MAC 地址符合，符合就将包收起来。")])]),t._v(" "),_("li",[_("p",[t._v("接着继续扒开数据包的 IP 头，发现 IP 地址符合，根据 IP 头中协议项，知道自己上层是 TCP 协议。")])]),t._v(" "),_("li",[_("p",[t._v("于是，扒开 TCP 的头，里面有序列号，需要看一看这个序列包是不是我想要的，如果是就放入缓存中然后返回一个 ACK，如果不是就丢弃。TCP头部里面还有端口号， HTTP 的服务器正在监听这个端口号。")])]),t._v(" "),_("li",[_("p",[t._v("于是，服务器自然就知道是 HTTP 进程想要这个包，于是就将包发给 HTTP 进程。")])])]),t._v(" "),_("h2",{attrs:{id:"响应"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#响应"}},[t._v("#")]),t._v(" 响应")]),t._v(" "),_("ol",[_("li",[_("p",[t._v("服务器的 HTTP 进程看到，原来这个请求是要访问一个页面，于是就"),_("strong",[t._v("把这个网页封装在 HTTP 响应报文里")]),t._v("。")])]),t._v(" "),_("li",[_("p",[t._v("HTTP 响应报文也需要穿上 TCP、IP、MAC 头部，不过这次是源地址是服务器 IP 地址，目的地址是客户端 IP 地址。")])])]),t._v(" "),_("h2",{attrs:{id:"客户端接收响应并渲染页面"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#客户端接收响应并渲染页面"}},[t._v("#")]),t._v(" 客户端接收响应并渲染页面")]),t._v(" "),_("ol",[_("li",[_("p",[t._v("客户端收到了服务器的响应数据包后，同样也非常的高兴，客户能拆快递了！")])]),t._v(" "),_("li",[_("p",[t._v("于是，客户端开始扒皮，"),_("strong",[t._v("把收到的数据包的皮扒剩 HTTP 响应报文后，交给浏览器去渲染页面")]),t._v("，一份特别的数据包快递，就这样显示出来了！")])])]),t._v(" "),_("h2",{attrs:{id:"断开连接"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#断开连接"}},[t._v("#")]),t._v(" 断开连接")]),t._v(" "),_("p",[t._v("最后，客户端要离开了，向服务器发起了 TCP 四次挥手，至此双方的连接就断开了。")]),t._v(" "),_("h2",{attrs:{id:"参考"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[t._v("#")]),t._v(" 参考")]),t._v(" "),_("p",[_("a",{attrs:{href:"https://mp.weixin.qq.com/s/iSZp41SRmh5b2bXIvzemIw",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://mp.weixin.qq.com/s/iSZp41SRmh5b2bXIvzemIw"),_("OutboundLink")],1)])])}),[],!1,null,null,null);a.default=r.exports}}]);