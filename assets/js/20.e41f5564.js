(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{574:function(a,t,v){"use strict";v.r(t);var _=v(14),r=Object(_.a)({},(function(){var a=this,t=a.$createElement,v=a._self._c||t;return v("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[v("h2",{attrs:{id:"对象的创建过程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#对象的创建过程"}},[a._v("#")]),a._v(" 对象的创建过程")]),a._v(" "),v("p",[v("img",{attrs:{src:"https://walegarrett-image-1304556108.cos.ap-chengdu.myqcloud.com/markdown_img/202203231542988.png",alt:"img"}})]),a._v(" "),v("h3",{attrs:{id:"_1-类加载检查"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-类加载检查"}},[a._v("#")]),a._v(" 1. 类加载检查")]),a._v(" "),v("p",[a._v("当Java虚拟机遇到一条字节码"),v("strong",[a._v("new指令")]),a._v("时，首先将去"),v("strong",[a._v("检查这个指令的参数是否能在常量池中定位到一个类的符号引用，并且检查这个符号引用代表的类是否已被加载、解析和初始化过")]),a._v("。如果没有，那必须先执行相应的类加载过程。")]),a._v(" "),v("h3",{attrs:{id:"_2-分配内存"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-分配内存"}},[a._v("#")]),a._v(" 2. 分配内存")]),a._v(" "),v("p",[a._v("在类加载检查通过后，接下来虚拟机将"),v("strong",[a._v("为新生对象分配内存")]),a._v("。对象所需内存的大小在类加载完成后便可完全确定，"),v("strong",[a._v("为对象分配空间的任务实际上便等同于把一块确定大小的内存块从Java堆中划分出来")]),a._v("。")]),a._v(" "),v("p",[a._v("内存分配方式：取决于 Java 堆内存是否规整。而 "),v("strong",[a._v('Java 堆内存是否规整，取决于 GC 收集器的算法是"标记-清除"，还是"标记-整理"（也称作"标记-压缩"），值得注意的是，复制算法内存也是规整的。')])]),a._v(" "),v("p",[v("img",{attrs:{src:"https://walegarrett-image-1304556108.cos.ap-chengdu.myqcloud.com/markdown_img/202203231542595.png",alt:"img"}})]),a._v(" "),v("h4",{attrs:{id:"内存分配并发问题"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#内存分配并发问题"}},[a._v("#")]),a._v(" 内存分配并发问题")]),a._v(" "),v("p",[a._v("除如何划分可用空间之外，还有另外一个需要考虑的问题：对象创建在虚拟机中是非常频繁的行为，即使仅仅修改一个指针所指向的位置，在并发情况下也并不是线程安全的，可能出现正在给对象A分配内存，指针还没来得及修改，对象B又同时使用了原来的指针来分配内存的情况。解决这个问题有两种可选方案：")]),a._v(" "),v("ol",[v("li",[v("p",[a._v("一种是对分配内存空间的动作进行同步处理——实际上虚拟机是采用CAS配上失败重试的方式保证更新操作的原子性；")])]),a._v(" "),v("li",[v("p",[a._v("另外一种是把内存分配的动作按照线程划分在不同的空间之中进行，即"),v("strong",[a._v("每个线程在Java堆中预先分配一小块内存，称为本地线程分配缓冲（Thread Local AllocationBuffer，TLAB），哪个线程要分配内存，就在哪个线程的本地缓冲区中分配，只有本地缓冲区用完了，分配新的缓存区时才需要同步锁定")]),a._v("。虚拟机是否使用TLAB，可以通过-XX：+/-UseTLAB参数来设定。")])])]),a._v(" "),v("h3",{attrs:{id:"_3-初始化零值"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-初始化零值"}},[a._v("#")]),a._v(" 3. 初始化零值")]),a._v(" "),v("p",[a._v("内存分配完成之后，"),v("strong",[a._v("虚拟机必须将分配到的内存空间（但不包括对象头）都初始化为零值")]),a._v("，如果使用了TLAB的话，这一项工作也可以提前至TLAB分配时顺便进行。"),v("strong",[a._v("这步操作保证了对象的实例字段在Java代码中可以不赋初始值就直接使用，使程序能访问到这些字段的数据类型所对应的零值。")])]),a._v(" "),v("h3",{attrs:{id:"_4-设置对象头"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_4-设置对象头"}},[a._v("#")]),a._v(" 4. 设置对象头")]),a._v(" "),v("p",[a._v("接下来，Java虚拟机还要对对象进行必要的设置，例如"),v("strong",[a._v("这个对象是哪个类的实例、如何才能找到类的元数据信息、对象的哈希码")]),a._v("（实际上对象的哈希码会延后到真正调用Object::hashCode()方法时才计算）、对象的GC分代年龄等信息。这些信息存放在对象的对象头（Object Header）之中。根据虚拟机当前运行状态的不同，如是否启用偏向锁等，对象头会有不同的设置方式。")]),a._v(" "),v("h3",{attrs:{id:"_5-执行init方法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_5-执行init方法"}},[a._v("#")]),a._v(" 5. 执行init方法")]),a._v(" "),v("p",[a._v("在上面工作都完成之后，从虚拟机的视角来看，一个新的对象已经产生了。但是从Java程序的视角看来，"),v("strong",[a._v("对象创建才刚刚开始——构造函数，即Class文件中的<init>()方法还没有执行，所有的字段都为默认的零值")]),a._v("，对象需要的其他资源和状态信息也还没有按照预定的意图构造好。一般来说（由字节码流中new指令后面是否跟随invokespecial指令所决定，Java编译器会在遇到new关键字的地方同时生成这两条字节码指令，但如果直接通过其他方式产生的则不一定如此），"),v("strong",[a._v("new指令之后会接着执行<init>()方法，按照程序员的意愿对对象进行初始化，这样一个真正可用的对象才算完全被构造出来。")])]),a._v(" "),v("p",[a._v("在构造一个类的实例对象时，遵循的原则是**先静后动，先父后子，先变量，后代码块，构造器。**在Java程序层面会依次进行以下操作：")]),a._v(" "),v("ul",[v("li",[v("p",[a._v("初始化父类的静态变量（如果是首次使用此类）")])]),a._v(" "),v("li",[v("p",[a._v("初始化子类的静态变量（如果是首次使用此类）")])]),a._v(" "),v("li",[v("p",[a._v("执行父类的静态代码块（如果是首次使用此类）")])]),a._v(" "),v("li",[v("p",[a._v("执行子类的静态代码块（如果是首次使用此类）")])]),a._v(" "),v("li",[v("p",[a._v("初始化父类的实例变量")])]),a._v(" "),v("li",[v("p",[a._v("初始化子类的实例变量")])]),a._v(" "),v("li",[v("p",[a._v("执行父类的普通代码块")])]),a._v(" "),v("li",[v("p",[a._v("执行子类的普通代码块")])]),a._v(" "),v("li",[v("p",[a._v("执行父类的构造器")])]),a._v(" "),v("li",[v("p",[a._v("执行子类的构造器")])])]),a._v(" "),v("h2",{attrs:{id:"对象的内存布局"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#对象的内存布局"}},[a._v("#")]),a._v(" 对象的内存布局")]),a._v(" "),v("p",[v("img",{attrs:{src:"https://walegarrett-image-1304556108.cos.ap-chengdu.myqcloud.com/markdown_img/202203231542822.png",alt:"img"}})]),a._v(" "),v("p",[a._v("在HotSpot虚拟机里，对象在堆内存中的存储布局可以划分为三个部分：对象头（Header）、实例数据（Instance Data）和对齐填充（Padding）。")]),a._v(" "),v("p",[v("img",{attrs:{src:"https://walegarrett-image-1304556108.cos.ap-chengdu.myqcloud.com/markdown_img/202203231542024.png",alt:"img"}})]),a._v(" "),v("p",[a._v("mark word ：对象标记字段占 4 个字节，用于存储一些列的标记 位，比如：哈希值、轻量级锁的标记位，偏向锁标记位、分代年龄等。")]),a._v(" "),v("p",[a._v("Klass Pointer Class 对象的类型指针， Jdk1.8 默认开启指针压缩后为 4 字节，关闭指针压缩（ XX: UseCompressedOops ）后，长度为 8 字节。其指向的位置是对象对应的 Class 对象（其对应的元数据对象）的内存地址。")]),a._v(" "),v("p",[a._v("对象实际数据：包括对象的所有成员变量，大小由各个成员变量决定，比如： byte占 1 个字节 8 比特位、 int 占 4 个字节 32 比特位。")]),a._v(" "),v("p",[a._v("对齐：最后这段空间补全并非必须，仅仅为了起到占位符的作用。由于 HotSpot 虚拟机的内存管理系统要求对象起始地址必须是 8 字节的整数倍，所以对象头正好是8 字节的倍数。因此当对象实例数据部分没有对齐的话，就需要通过对齐填充来补全。")]),a._v(" "),v("h2",{attrs:{id:"对象的访问定位"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#对象的访问定位"}},[a._v("#")]),a._v(" 对象的访问定位")]),a._v(" "),v("p",[a._v("我们的"),v("strong",[a._v("Java程序会通过栈上的reference数据来操作堆上的具体对象")]),a._v("。由于reference类型在《Java虚拟机规范》里面只规定了它是一个指向对象的引用，并没有定义这个引用应该通过什么方式去定位、访问到堆中对象的具体位置，所以对象访问方式也是由虚拟机实现而定的，主流的访问方式主要有使用句柄和直接指针两种：")]),a._v(" "),v("ul",[v("li",[a._v("如果使用句柄访问的话，Java堆中将可能会划分出一块内存来作为句柄池，reference中存储的就是对象的句柄地址，而句柄中包含了对象实例数据与类型数据各自具体的地址信息，其结构如图2-2所示。")])]),a._v(" "),v("p",[v("img",{attrs:{src:"https://walegarrett-image-1304556108.cos.ap-chengdu.myqcloud.com/markdown_img/202203282234149.png",alt:"img"}})]),a._v(" "),v("ul",[v("li",[a._v("如果使用直接指针访问的话，Java堆中对象的内存布局就必须考虑如何放置访问类型数据的相关信息，"),v("strong",[a._v("reference中存储的直接就是对象地址")]),a._v("，如果只是访问对象本身的话，就不需要多一次间接访问的开销。")])]),a._v(" "),v("p",[v("img",{attrs:{src:"https://walegarrett-image-1304556108.cos.ap-chengdu.myqcloud.com/markdown_img/202203231542922.png",alt:"img"}})]),a._v(" "),v("p",[a._v("这两种对象访问方式各有优势，使用句柄来访问的最大好处就是reference中存储的是稳定句柄地址，在对象被移动（垃圾收集时移动对象是非常普遍的行为）时只会改变句柄中的实例数据指针，而reference本身不需要被修改。")]),a._v(" "),v("p",[a._v("使用直接指针来访问最大的好处就是速度更快，它节省了一次指针定位的时间开销，由于对象访问在Java中非常频繁，因此这类开销积少成多也是一项极为可观的执行成本，"),v("strong",[a._v("就本书讨论的主要虚拟机HotSpot而言，它主要使用第二种方式进行对象访问。")])])])}),[],!1,null,null,null);t.default=r.exports}}]);