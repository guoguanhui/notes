(window.webpackJsonp=window.webpackJsonp||[]).push([[218],{772:function(t,a,s){"use strict";s.r(a);var e=s(14),v=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"内核态和用户态的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#内核态和用户态的区别"}},[t._v("#")]),t._v(" 内核态和用户态的区别？")]),t._v(" "),s("p",[t._v("操作系统引入内核态和用户态的目的是为了防止用户程序的一些操作破坏操作系统。常见的问题是，设置特殊寄存器的值、访问存储器的任意位置、I/O 请求、申请更多系统资源等操作，都有可能引发不可意料的异常。此外，进程调度也不应该是用户程序来实现的，而是应该交给操作系统调度和控制。")]),t._v(" "),s("p",[t._v("通过引入内核态和用户态，可以将用户的行为限制在一定的范围，核心态只能由操作系统运行，可以执行特权操作。用户程序通过系统调用 system call 执行这些特权操作。OS 执行前会判断进程是否有权限执行相应的指令。")]),t._v(" "),s("h2",{attrs:{id:"内部碎片和外部碎片"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#内部碎片和外部碎片"}},[t._v("#")]),t._v(" 内部碎片和外部碎片：")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("内部碎片是固定分区法产生的，指"),s("strong",[t._v("被占用分区上未被利用的空间，由于该分区被占用，因此无法被分配使用")])])]),t._v(" "),s("li",[s("p",[t._v("外部碎片是动态分区法产生的，指"),s("strong",[t._v("被占用分区之间的小空间，虽然可以被使用，但是由于太小而无法被分配")])])])]),t._v(" "),s("h2",{attrs:{id:"硬链接和软链接"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#硬链接和软链接"}},[t._v("#")]),t._v(" 硬链接和软链接")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("硬链接和软链接主要用于给某个文件取别名。")])]),t._v(" "),s("li",[s("p",[t._v("硬链接是指多个目录项的“索引节点”指向一个文件，也就是指向同一个inode，但是inode是不能够跨文件系统的，每个文件系统都有各自的inode数据结构和列表，也因此**硬链接是不可用于跨文件系统的。**由于多个目录项都是指向同一个inode，"),s("strong",[t._v("只有删除文件的所有硬链接以及源文件时，才能从文件系统中彻底删除该文件")]),t._v("。")])]),t._v(" "),s("li",[s("p",[t._v("软链接相当于重新创建了一个文件，这个文件有独立的inode，但是这个文件的内容是另一个文件的路径，所以访问软链接的时候，实际上相当于访问到了另外一个文件，所以**软链接是可以跨文件系统的。**"),s("strong",[t._v("目标文件被删除了，链接文件还是存在的，只不过指向的文件找不到了")]),t._v("。")])])]),t._v(" "),s("h2",{attrs:{id:"死锁产生的四个条件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#死锁产生的四个条件"}},[t._v("#")]),t._v(" 死锁产生的四个条件")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("互斥条件：一个资源一次只能被一个进程使用")])]),t._v(" "),s("li",[s("p",[t._v("请求与保持条件：一个进程因请求资源而阻塞时，对已获得资源保持不放")])]),t._v(" "),s("li",[s("p",[t._v("不可剥夺条件：进程获得的资源，在未完全使用完之前，不能强行剥夺")])]),t._v(" "),s("li",[s("p",[t._v("循环等待条件：若干进程之间形成一种头尾相接的环形等待资源关系")])])]),t._v(" "),s("h2",{attrs:{id:"为什么需要在进程的基础上引入线程的概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么需要在进程的基础上引入线程的概念"}},[t._v("#")]),t._v(" 为什么需要在进程的基础上引入线程的概念")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("多线程之间会共享同一块地址空间和所有可用数据的能力，这是进程所不具备的。")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("线程要比进程更加轻量级")]),t._v("，由于进程更轻，所以它比进程更容易创建也更容易撤销。在许多系统中，创建一个线程要比创建一个进程快10-100倍。")])]),t._v(" "),s("li",[s("p",[t._v("性能方面的探讨：如果多个线程都是CPU密集型的，那么并不能获得性能上的增强，但是存在着大量的计算和大量的I/O处理，拥有多个线程能在这些活动中彼此重叠进行，从而会加快应用程序的执行速度。")])]),t._v(" "),s("li",[s("p",[t._v("进程切换是一个开销很大的操作。"),s("strong",[t._v("进程切换的开销")]),t._v("主要包括：")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("处理机的上下文切换：保存和恢复相关寄存器的内容")])]),t._v(" "),s("li",[s("p",[t._v("与进程相关的数据结构更改：存储管理有关的记录信息（如页表）、文件管理有关数据（如文件描述符）、进程控制块中的各种队列（如阻塞队列、就绪队列、通信队列）等")])])])]),t._v(" "),s("li",[s("p",[t._v("**进程的处理机资源和其他资源是一起分配的，进程切换的时候会整体切换，开销很大。**如果我们只切换必需的、与处理机相关的信息，就可以有效减少开销。"),s("strong",[t._v("这种情况下，处理机分配的单位和其他的资源分配的单位不能再是一个实体。")])])]),t._v(" "),s("li",[s("p",[t._v("由此引入线程：把一个进程分为多个执行任务的单元体，"),s("strong",[t._v("只为其分配处理机")]),t._v("，这些执行任务的单元体就是线程。")])])]),t._v(" "),s("h2",{attrs:{id:"操作系统线程实现的方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#操作系统线程实现的方式"}},[t._v("#")]),t._v(" 操作系统线程实现的方式？")]),t._v(" "),s("h2",{attrs:{id:"进程间通信的机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#进程间通信的机制"}},[t._v("#")]),t._v(" 进程间通信的机制？")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("管道机制：所谓的管道，就是"),s("strong",[t._v("内核中的一串缓存")]),t._v("。从管道的一段写入的数据，实际上是缓存在内核中的，另一端读取，实际也就是从内核中读取这段数据。"),s("strong",[t._v("管道传输的数据是无格式的流且大小受限")]),t._v("。")]),t._v(" "),s("ul",[s("li",[s("p",[s("strong",[t._v("匿名管道：对于匿名管道来说，它的通信范围是存在父子关系的进程")]),t._v("。因为管道没有实体，也就是没有管道文件，只能通过fork来复制父进程fd文件描述符，来达到通信的目的。")])]),t._v(" "),s("li",[s("p",[t._v("命名管道（FIFO）："),s("strong",[t._v("对于命名管道来说，它可以在不相关的进程间相互通信")]),t._v("。因为命名管道提前创建了一个类型为管道的设备文件，在进程里只要使用这个设备文件，就可以相互通信。")])])])]),t._v(" "),s("li",[s("p",[t._v("消息队列：前面介绍的管道通信方式效率较低，不适用于进程间频繁交换数据。消息队列是"),s("strong",[t._v("保存在内核中的消息链表")]),t._v("，在发送数据时会分成一个个独立的数据单元，也就是"),s("strong",[t._v("消息体（数据块）")]),t._v("，消息体是用户自定义的数据类型，由消息发送方和接收方约定。"),s("strong",[t._v("消息队列允许一个或多个进程向它写入与读取消息")]),t._v("。消息的发送者和接收者不需要同时与消息队列交互。消息会保存在队列中，直到接收者取回它。也就是说，消息队列是异步的，但这也造成了一个缺点，就是接收者必须轮询消息队列，才能收到最近的消息。消息队列不适合较大数据的传输。内核中每个消息体都有一个最大长度的限制，同时所有队列的全部消息体的总长度也有上限。消息队列通信过程中，存在用户态和内核态之间拷贝数据的开销。")])]),t._v(" "),s("li",[s("p",[t._v("共享内存：共享内存很好地解决了消息队列的读取和写入过程中发生用户态和内核态之间拷贝数据的问题。共享内存机制就是，"),s("strong",[t._v("拿出一块虚拟地址空间，映射到相同的物理内存中")]),t._v("。共享内存的优点是"),s("strong",[t._v("简单且高效")]),t._v("，访问共享内存区域和访问进程独有的内存区域一样快，原因是"),s("strong",[t._v("不需要系统调用，不涉及用户态到内核态的转换，也不需要对数据不必要的复制")]),t._v("。共享内存的缺点是"),s("strong",[t._v("存在并发问题")]),t._v("，有可能出现多个进程修改同一块内存，因此共享内存一般与信号量结合使用。")])]),t._v(" "),s("li",[s("p",[t._v("信号量：使用了共享内存的通信方式，会带来新的问题，那就是多个进程会同时修改同一个共享内存，导致冲突的产生。"),s("strong",[t._v("信号量机制可以防止多进程竞争共享资源，保证任意时刻只能被一个进程访问")]),t._v("。信号量是一个整数的计数器，主要用于实现进程间的互斥与同步，而不是用于缓存进程间通信的数据。"),s("strong",[t._v("信号量更像一种进程同步的机制和手段")]),t._v("。"),s("strong",[t._v("信号量在底层的实现是通过硬件提供的原子指令，如 Test And Set、Compare And Swap 等")]),t._v("。比如 golang 实现互斥量就是使用了 Compare And Swap 指令。")])]),t._v(" "),s("li",[s("p",[t._v("信号：前面说的进程间通信都是常规下的工作模式，"),s("strong",[t._v("对于异常下的工作模式，则需要使用信号来通知进程")]),t._v("。我们常使用的命令：CTRL + C会产生SIGINT信号，表示终止该进程；而CTRL + Z则会产生SIGTSTP信号，表示停止该进程，但是还未结束。")])]),t._v(" "),s("li",[s("p",[t._v("Socket：Socket通信可以实现跨网络与不同主机上的进程进行通信。")])])]),t._v(" "),s("h2",{attrs:{id:"区别同步-异步-阻塞-非阻塞io"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#区别同步-异步-阻塞-非阻塞io"}},[t._v("#")]),t._v(" 区别同步/异步/阻塞/非阻塞IO?")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("同步和异步描述的是一种消息通知的机制，主动等待消息返回还是被动接受消息。同步io指的是调用方通过主动等待获取调用返回的结果来获取消息通知，而异步io指的是被调用方通过某种方式(如，回调函数)来通知调用方获取消息。")])]),t._v(" "),s("li",[s("p",[t._v("阻塞和非阻塞描述的是调用方在获取消息过程中的状态，阻塞等待还是立刻返回。阻塞io指的是调用方在获取消息的过程中会挂起阻塞，知道获取到消息，而非阻塞io指的是调用方在获取io的过程中会立刻返回而不进行挂起。")])])]),t._v(" "),s("h2",{attrs:{id:"什么是零拷贝"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是零拷贝"}},[t._v("#")]),t._v(" 什么是零拷贝？")]),t._v(" "),s("ol",[s("li",[t._v("传统的文件传输方式如下所示：")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://walegarrett-image-1304556108.cos.ap-chengdu.myqcloud.com/markdown_img/202203212016205.png",alt:"img"}})]),t._v(" "),s("ol",[s("li",[s("p",[t._v("这种方式共发生了四次用户态与内核态的上下文切换，因为发生了两次系统调用，一次是read()，一次是write()。其次，还发生了四次数据拷贝，其中两次是DMA拷贝，另外两次是CPU拷贝。")])]),t._v(" "),s("li",[s("p",[t._v("零拷贝的实现方法共有三种方式：")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("mmap()系统调用函数会直接把内核缓冲区里的数据映射到用户空间，这样操作系统内核与用户空间就不要再进行任何的数据拷贝操作。这不是最佳的零拷贝实现，因为仍然需要通过CPU把内核缓冲区的数据拷贝到socket缓冲区中，"),s("strong",[t._v("仍然需要四次上下文切换。")])])]),t._v(" "),s("li",[s("p",[t._v("sendfile()可以替代前面的read()和write()两个系统调用，这样可以减少一次系统调用，也就减少了两次上下文切换。其次，该系统调用，可以直接把内核缓冲区里的数据拷贝到socket缓冲区里，不再拷贝到用户态，这样就"),s("strong",[t._v("只有两次上下文切换和三次数据拷贝")]),t._v("。")])]),t._v(" "),s("li",[s("p",[t._v("以上的技术还不是真正的零拷贝技术，因为还是涉及到一次CPU拷贝，如果网卡支持SG-DMA这种与普通DMA不同的技术，可以"),s("strong",[t._v("进一步减少通过CPU把内核缓冲区里的数据拷贝到socket缓冲区的过程")]),t._v("。具体过程如下：")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("通过DMA将磁盘上的数据拷贝到内核缓冲区里。")])]),t._v(" "),s("li",[s("p",[t._v("缓冲区描述符和数据长度传送到socket缓冲区，这样网卡的SG-DMA控制器就可以直接将内核缓冲区中的数据拷贝到网卡的缓冲区里，这避免了将数据从操作系统内核缓冲区拷贝到socket缓冲区的过程，也因此减少了一次数据拷贝的过程。")])])])])])])]),t._v(" "),s("h2",{attrs:{id:"select-poll-epoll的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#select-poll-epoll的区别"}},[t._v("#")]),t._v(" select/poll/epoll的区别？")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("select/poll/epoll是"),s("strong",[t._v("内核提供给用户态的多路复用系统的系统调用")]),t._v("，进程可以通过一个系统调用函数从内核获取多个事件。"),s("strong",[t._v("在获取事件时，先把所有连接（在操作系统中体现为一个****文件操作符）传给内核，再由内核返回产生了事件的连接，然后在用户态处理这些连接的请求。")])])]),t._v(" "),s("li",[s("p",[t._v("select实现多路复用的方式是，用户态下将"),s("strong",[t._v("已经连接的Socket")]),t._v("都放在一个"),s("strong",[t._v("文件描述集合")]),t._v("中，然后调用select函数将文件描述符集合拷贝到内核中，让内核来检查是否有网络事件产生。**操作系统内核检查的方式很粗暴，它通过遍历文件操作符集合的方式，当检查到有事件后，将此Socket标记为可读或可写，接着再将整个文件描述符集合拷贝回用户态。**用户态再通过遍历的方式找到可读或可写的Socket，然后再对其进行处理。select的方式，需要两次遍历文件操作符集合，一次是在内核里，一次是在用户态；而且，"),s("strong",[t._v("还会发生两次拷贝文件描述符集合，先从用户态传入内核空间，由内核空间修改后，再传回用户空间")]),t._v("。更严重的是，select使用固定长度的bitmap来表示文件描述符集合，它所支持的文件描述符个数是有限制的。")])]),t._v(" "),s("li",[s("p",[t._v("poll不再使用BitsMap来存储所关注的文件描述符，"),s("strong",[t._v("取而代之的是动态数组，以链表来组织")]),t._v("。这种方式突破了select的文件描述符个数限制。但是，poll和select并没有太大的本质区别，两者都是使用线性结构来存储进程关注的Socket集合，因此都需要遍历文件描述符集合来找到或者修改可读可写的Socket，而且也需要在用户态与内核态之间拷贝文件描述符集合。")])]),t._v(" "),s("li",[s("p",[t._v("epoll在内核里使用红黑树来跟踪进程所有待检测的文件描述字，把需要监控的socket加入内核中的红黑树里。通过红黑树的操作，不要像select和poll一样，每次操作都传入整个socket集合，只需要传入一个待检测的socket。")])]),t._v(" "),s("li",[s("p",[t._v("epoll使用"),s("strong",[t._v("事件驱动机制")]),t._v("，内核里维护了一个链表来记录就绪事件，"),s("strong",[t._v("当某个socket有事件发生时，通过回调函数内核会将其加入到这个就绪事件列表中")]),t._v("。当用户调用epoll_wait()函数时，只会返回有事件发生的文件描述符个数，不需要像select/poll一样轮询整个socket集合，大大提高了检测的效率。")])])]),t._v(" "),s("h2",{attrs:{id:"linux常见的命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#linux常见的命令"}},[t._v("#")]),t._v(" linux常见的命令？")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://linuxtools-rst.readthedocs.io/zh_CN/latest/base/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Linux基础 — Linux Tools Quick Tutorial"),s("OutboundLink")],1)]),t._v(" "),s("h3",{attrs:{id:"基础命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基础命令"}},[t._v("#")]),t._v(" 基础命令")]),t._v(" "),s("ul",[s("li",[t._v("如何查看某个命令的文档？")]),t._v(" "),s("li",[t._v("如何查看占用某个端口的进程？")]),t._v(" "),s("li",[t._v("如何搜索当前目录下某个名字的文件？")]),t._v(" "),s("li",[t._v("如何统计文件行数？")]),t._v(" "),s("li",[t._v("grep 查找文件内容常用的几个选项")])]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("// 如何查看某个命令的文档？ \n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("man")]),t._v(" \n// 如何查看占用某个端口的进程？ \n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("lsof")]),t._v(" -i :"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("port"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" // 如：lsof -i :8080\n// 如何搜索当前目录下某个名字的文件？ \n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("find")]),t._v(" ./ -name filename \n// 如何统计文件行数？ \n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("wc")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("选项"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" 文件1 文件2 \n-c 统计字节数 \n-l 统计行数 \n-w 统计字数 \n// "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("grep")]),t._v(" 查找文件内容常用的几个选项\n  -A 输出匹配行之后的多少行\n  -B 输出匹配行之前的多少行\n  -C 输出匹配行前后多少行\n  -c --count 只统计总行数\n  -i 忽略大小写\n\n  -e 使用正则表达式\n  -n --line-number 显示行号，常和 -r 一起使用\n  -r 递归搜索整个目录\n  -v --revert-match 反转查找，查找不包含指定字符串的文本行\n\n  --color 关键字着色\n")])])]),s("h3",{attrs:{id:"进程管理相关命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#进程管理相关命令"}},[t._v("#")]),t._v(" 进程管理相关命令")]),t._v(" "),s("h4",{attrs:{id:"查询正在运行的进程信息"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#查询正在运行的进程信息"}},[t._v("#")]),t._v(" 查询正在运行的进程信息")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("ps "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("ef \n")])])]),s("p",[t._v("查询归属于用户colin115的进程")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("ps "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("ef "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" grep colin115\n")])])]),s("p",[t._v("以完整的格式显示所有的进程")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("ps "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("ajx \n")])])]),s("h4",{attrs:{id:"查询进程id-适合只记得部分进程字段"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#查询进程id-适合只记得部分进程字段"}},[t._v("#")]),t._v(" 查询进程ID（适合只记得部分进程字段）")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[t._v("查询进程名中含有re的进程\npgrep -l re\n")])])]),s("h4",{attrs:{id:"显示进程信息-并实时更新"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#显示进程信息-并实时更新"}},[t._v("#")]),t._v(" 显示进程信息，并实时更新")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("top \n")])])]),s("h4",{attrs:{id:"查看端口占用的进程状态"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#查看端口占用的进程状态"}},[t._v("#")]),t._v(" 查看端口占用的进程状态")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("lsof "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3306")]),t._v("\n")])])]),s("h4",{attrs:{id:"显示某个进程的线程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#显示某个进程的线程"}},[t._v("#")]),t._v(" 显示某个进程的线程")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("在ps命令中，“"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),t._v("”选项可以开启线程查看。\n下面的命令列出了由进程号为"),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("pid"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("的进程创建的所有线程。\nps "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("p "),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("pid"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n让top输出某个特定进程"),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("pid"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("并检查该进程内运行的线程状况：\ntop "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("H")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("p "),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("pid"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])])])}),[],!1,null,null,null);a.default=v.exports}}]);