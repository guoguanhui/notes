(window.webpackJsonp=window.webpackJsonp||[]).push([[143],{698:function(t,a,e){"use strict";e.r(a);var r=e(14),_=Object(r.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"mysql优化概述"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mysql优化概述"}},[t._v("#")]),t._v(" MySQL优化概述")]),t._v(" "),e("p",[t._v("MySQL数据库常见的两个瓶颈是：CPU和I/O的瓶颈。")]),t._v(" "),e("p",[t._v("CPU在饱和的时候一般发生在数据装入内存或从磁盘上读取数据时候。")]),t._v(" "),e("p",[t._v("磁盘I/O瓶颈发生在装入数据远大于内存容量的时候，如果应用分布在网络上，那么查询量相当大的时候那么平瓶颈就会出现在网络上。")]),t._v(" "),e("p",[t._v("我们可以用mpstat, iostat, sar和vmstat来查看系统的性能状态。除了服务器硬件的性能瓶颈，对于MySQL系统本身，我们可以使用工具来优化数据库的性能。")]),t._v(" "),e("h2",{attrs:{id:"mysql优化方案"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mysql优化方案"}},[t._v("#")]),t._v(" MySQL优化方案")]),t._v(" "),e("p",[t._v("Mysql的优化，大体可以分为三部分：索引的优化，sql语句的优化，表的优化")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://walegarrett-image-1304556108.cos.ap-chengdu.myqcloud.com/markdown_img/202203271239332.png",alt:"img"}})]),t._v(" "),e("h3",{attrs:{id:"索引"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#索引"}},[t._v("#")]),t._v(" 索引")]),t._v(" "),e("p",[t._v("一般的应用系统，读写比例在10：1左右，而且插入操作和一般的更新操作很少出现性能问题，在生产环境中，我们遇到最多的也是最容易出现问题的，还是一些复杂的查询操作，因此对查询语句的优化是重中之重，加速查询最好的方法就是索引。")]),t._v(" "),e("p",[t._v("索引：简单的说，相当于图书的目录，可以帮助用户快速的找到需要的内容。")]),t._v(" "),e("p",[t._v("在MySQL中也叫做“键”，是存储引擎用于快速找到记录的一种数据结构。能够大大提高查询效率。特别是当数据量非常大，查询涉及多个表时，使用索引往往能使查询速度加快成千上万倍。")]),t._v(" "),e("p",[t._v("总结：索引的目的在于提高查询效率，与我们查询图书所用的目录是一个道理：先定位到章，然后定位到该章下的一个小结，然后找到页数。相似的例子还有：查字典，查地图等。")]),t._v(" "),e("h3",{attrs:{id:"索引类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#索引类型"}},[t._v("#")]),t._v(" 索引类型")]),t._v(" "),e("ul",[e("li",[t._v("普通索引")])]),t._v(" "),e("p",[t._v("是最基本的索引，它没有任何限制。")]),t._v(" "),e("ul",[e("li",[t._v("唯一索引")])]),t._v(" "),e("div",{staticClass:"language-plain extra-class"},[e("pre",{pre:!0,attrs:{class:"language-plain"}},[e("code",[t._v("与前面的普通索引类似，不同的就是：索引列的值必须唯一，但允许有空值。如果是组合索引，则列值的组合必须唯一。\n")])])]),e("ul",[e("li",[t._v("组合索引")])]),t._v(" "),e("div",{staticClass:"language-plain extra-class"},[e("pre",{pre:!0,attrs:{class:"language-plain"}},[e("code",[t._v("指多个字段上创建的索引，只有在查询条件中使用了创建索引时的第一个字段，索引才会被使用。\n")])])]),e("ul",[e("li",[t._v("主键索引")])]),t._v(" "),e("p",[t._v("是一种特殊的唯一索引，一个表只能有一个主键，不允许有空值。一般是在建表的时候同时创建主键索引")]),t._v(" "),e("ul",[e("li",[t._v("全文索引")])]),t._v(" "),e("p",[t._v("主要用来查找文本中的关键字，而不是直接与索引中的值相比较。fulltext索引跟其它索引大不相同，它更像是一个搜索引擎，而不是简单的where语句的参数匹配。fulltext索引配合match against操作使用，而不是一般的where语句加like。它可以在create table，alter table ，create index使用，不过目前只有char、varchar，text 列上可以创建全文索引。值得一提的是，在数据量较大时候，现将数据放入一个没有全局索引的表中，然后再用CREATE index创建fulltext索引，要比先为一张表建立fulltext然后再将数据写入的速度快很多。")]),t._v(" "),e("h3",{attrs:{id:"索引优化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#索引优化"}},[t._v("#")]),t._v(" 索引优化")]),t._v(" "),e("ul",[e("li",[t._v("只要列中含有NULL值，就最好不要在此例设置索引，复合索引如果有NULL值，此列在使用时也不会使用索引")]),t._v(" "),e("li",[t._v("尽量使用短索引，如果可以，应该制定一个前缀长度")]),t._v(" "),e("li",[t._v("对于经常在where子句使用的列，最好设置索引，这样会加快查找速度")]),t._v(" "),e("li",[t._v("对于有多个列where或者order by子句的，应该建立复合索引")]),t._v(" "),e("li",[t._v("对于like语句，以%或者‘-’开头的不会使用索引，以%结尾会使用索引")]),t._v(" "),e("li",[t._v("尽量不要在列上进行运算（函数操作和表达式操作）")]),t._v(" "),e("li",[t._v("尽量不要使用not in和<>操作")])]),t._v(" "),e("h2",{attrs:{id:"sql慢查询的优化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#sql慢查询的优化"}},[t._v("#")]),t._v(" SQL慢查询的优化")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://walegarrett-image-1304556108.cos.ap-chengdu.myqcloud.com/markdown_img/202203271239298.png",alt:"img"}})]),t._v(" "),e("h3",{attrs:{id:"如何捕获低效sql"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#如何捕获低效sql"}},[t._v("#")]),t._v(" 如何捕获低效sql")]),t._v(" "),e("p",[t._v("1）slow_query_log")]),t._v(" "),e("p",[t._v("这个参数设置为ON，可以捕获执行时间超过一定数值的SQL语句。")]),t._v(" "),e("p",[t._v("2）ong_query_time")]),t._v(" "),e("p",[t._v("当SQL语句执行时间超过此数值时，就会被记录到日志中，建议设置为1或者更短。")]),t._v(" "),e("p",[t._v("3）slow_query_log_file")]),t._v(" "),e("p",[t._v("记录日志的文件名。")]),t._v(" "),e("p",[t._v("4）log_queries_not_using_indexes")]),t._v(" "),e("p",[t._v("这个参数设置为ON，可以捕获到所有未使用索引的SQL语句，尽管这个SQL语句有可能执行得挺快。")]),t._v(" "),e("h3",{attrs:{id:"慢查询优化的基本步骤"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#慢查询优化的基本步骤"}},[t._v("#")]),t._v(" 慢查询优化的基本步骤")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("先运行看看是否真的很慢，注意设置SQL_NO_CACHE")])]),t._v(" "),e("li",[e("p",[t._v("where条件单表查，锁定最小返回记录表。这句话的意思是把查询语句的where都应用到表中返回的记录数最小的表开始查起，单表每个字段分别查询，看哪个字段的区分度最高")])]),t._v(" "),e("li",[e("p",[t._v("explain查看执行计划，是否与1预期一致（从锁定记录较少的表开始查询）")])]),t._v(" "),e("li",[e("p",[t._v("order by limit 形式的sql语句让排序的表优先查")])]),t._v(" "),e("li",[e("p",[t._v("了解业务方使用场景")])]),t._v(" "),e("li",[e("p",[t._v("加索引时参照建索引的几大原则")])]),t._v(" "),e("li",[e("p",[t._v("观察结果，不符合预期继续从1开始分析")])])]),t._v(" "),e("h3",{attrs:{id:"优化原则"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#优化原则"}},[t._v("#")]),t._v(" 优化原则")]),t._v(" "),e("ul",[e("li",[t._v("查询时，能不要"),e("em",[t._v("就不用")]),t._v("，尽量写全字段名")]),t._v(" "),e("li",[t._v("大部分情况连接效率远大于子查询")]),t._v(" "),e("li",[t._v("多使用explain和profile分析查询语句")]),t._v(" "),e("li",[t._v("查看慢查询日志，找出执行时间长的sql语句优化")]),t._v(" "),e("li",[t._v("多表连接时，尽量小表驱动大表，即小表 join 大表")]),t._v(" "),e("li",[t._v("在千万级分页时使用limit")]),t._v(" "),e("li",[t._v("对于经常使用的查询，可以开启缓存")])]),t._v(" "),e("h2",{attrs:{id:"数据库表优化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数据库表优化"}},[t._v("#")]),t._v(" 数据库表优化")]),t._v(" "),e("ul",[e("li",[t._v("表的字段尽可能用NOT NULL")]),t._v(" "),e("li",[t._v("字段长度固定的表查询会更快")]),t._v(" "),e("li",[t._v("把数据库的大表按时间或一些标志分成小表")]),t._v(" "),e("li",[t._v("将表拆分")])]),t._v(" "),e("p",[t._v("数据表拆分：主要就是垂直拆分和水平拆分。")]),t._v(" "),e("p",[t._v("水平切分:将记录散列到不同的表中，各表的结构完全相同，每次从分表中查询, 提高效率。")]),t._v(" "),e("p",[t._v("垂直切分:将表中大字段单独拆分到另外一张表, 形成一对一的关系。")]),t._v(" "),e("h2",{attrs:{id:"索引优化-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#索引优化-2"}},[t._v("#")]),t._v(" 索引优化")]),t._v(" "),e("h3",{attrs:{id:"使用复合索引的的全部字段"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用复合索引的的全部字段"}},[t._v("#")]),t._v(" 使用复合索引的的全部字段")]),t._v(" "),e("p",[t._v("当建立了复合索引时，在查询的where条件中，最好全部的字段都使用到，并且严格按照索引顺序，这样的查询效率最高。")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://walegarrett-image-1304556108.cos.ap-chengdu.myqcloud.com/markdown_img/202203271240516.png",alt:"img"}})]),t._v(" "),e("h3",{attrs:{id:"最左前缀原则"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#最左前缀原则"}},[t._v("#")]),t._v(" 最左前缀原则")]),t._v(" "),e("p",[t._v("如果建立的是复合索引，索引的顺序要按照建立时的顺序，即从左到右，如：a->b->c（和 B+树的数据结构有关）")]),t._v(" "),e("h3",{attrs:{id:"禁止对索引做运算和函数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#禁止对索引做运算和函数"}},[t._v("#")]),t._v(" 禁止对索引做运算和函数")]),t._v(" "),e("p",[t._v("以下用法会"),e("strong",[t._v("导致索引失效")])]),t._v(" "),e("ul",[e("li",[t._v("计算，如：+、-、*、/、!=、<>、is null、is not null、"),e("strong",[t._v("or")])]),t._v(" "),e("li",[t._v("函数，如：sum()、round()等等")]),t._v(" "),e("li",[t._v('手动/自动类型转换，如：id = "1"，本来是数字，给写成字符串了')])]),t._v(" "),e("h3",{attrs:{id:"索引不要放在范围查询右边"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#索引不要放在范围查询右边"}},[t._v("#")]),t._v(" 索引不要放在范围查询右边")]),t._v(" "),e("p",[t._v('比如复合索引：a->b->c，当 where a="" and b>10 and 3=""，这时候只能用到 a 和 b，c 用不到索引，因为在'),e("strong",[t._v("范围之后索引都失效（和 B+树结构有关）")])]),t._v(" "),e("h3",{attrs:{id:"减少-select-的使用-使用覆盖索引"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#减少-select-的使用-使用覆盖索引"}},[t._v("#")]),t._v(" 减少 select * 的使用-使用覆盖索引")]),t._v(" "),e("p",[t._v("尽量保持select 查询字段和 where 中使用的索引字段一致。")]),t._v(" "),e("h3",{attrs:{id:"like模糊搜索优化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#like模糊搜索优化"}},[t._v("#")]),t._v(" like模糊搜索优化")]),t._v(" "),e("h4",{attrs:{id:"失效情况"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#失效情况"}},[t._v("#")]),t._v(" 失效情况")]),t._v(" "),e("ul",[e("li",[t._v('like "%张三%"')]),t._v(" "),e("li",[t._v('like "%张三"')])]),t._v(" "),e("h4",{attrs:{id:"解决方案"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#解决方案"}},[t._v("#")]),t._v(" 解决方案")]),t._v(" "),e("ul",[e("li",[t._v('使用复合索引，即 like 字段是 select 的查询字段，如：select name from table where name like "%张三%"')]),t._v(" "),e("li",[t._v('使用 like "张三%"')])]),t._v(" "),e("h3",{attrs:{id:"order优化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#order优化"}},[t._v("#")]),t._v(" order优化")]),t._v(" "),e("p",[t._v("当查询语句中使用 order by 进行排序时，如果没有使用索引进行排序，会出现 filesort 文件内排序，这种情况在数据量大或者并发高的时候，会有性能问题，需要优化。")]),t._v(" "),e("h4",{attrs:{id:"filesort-出现的情况举例"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#filesort-出现的情况举例"}},[t._v("#")]),t._v(" filesort 出现的情况举例")]),t._v(" "),e("ul",[e("li",[t._v("order by 字段不是索引字段")]),t._v(" "),e("li",[t._v("order by 字段是索引字段，但是 select 中没有使用覆盖索引，如：select * from staffs order by age asc;")]),t._v(" "),e("li",[t._v("order by 中同时存在 ASC 升序排序和 DESC 降序排序，如：select a, b from staffs order by a desc, b asc;")]),t._v(" "),e("li",[t._v("order by 多个字段排序时，不是按照索引顺序进行 order by，即不是按照最左前缀法则，如：select a, b from staffs order by b asc, a asc;")])]),t._v(" "),e("h4",{attrs:{id:"索引层面解决方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#索引层面解决方法"}},[t._v("#")]),t._v(" 索引层面解决方法")]),t._v(" "),e("ul",[e("li",[t._v("使用主键索引排序")]),t._v(" "),e("li",[t._v("按照最左前缀法则，并且使用覆盖索引排序，多个字段排序时，保持排序方向一致")]),t._v(" "),e("li",[t._v("在 SQL 语句中强制指定使用某索引，force index(索引名字)")]),t._v(" "),e("li",[t._v("不在"),e("a",{attrs:{href:"https://cloud.tencent.com/solution/database?from=10680",target:"_blank",rel:"noopener noreferrer"}},[t._v("数据库"),e("OutboundLink")],1),t._v("中排序，在代码层面排序")])]),t._v(" "),e("h4",{attrs:{id:"order-by-排序算法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#order-by-排序算法"}},[t._v("#")]),t._v(" order by 排序算法")]),t._v(" "),e("p",[t._v("双路排序Mysql4.1 之前是使用双路排序，字面的意思就是两次扫描磁盘，最终得到数据，读取行指针和 ORDER BY 列，对他们进行排序，然后扫描已经排好序的列表，按照列表中的值重新从列表中读取对数据输出。也就是从磁盘读取排序字段，在 buffer 进行排序，再从磁盘读取其他字段。")]),t._v(" "),e("p",[t._v("文件的磁盘 IO 非常耗时的，所以在 Mysql4.1 之后，出现了第二种算法，就是单路排序。")]),t._v(" "),e("p",[t._v("单路排序从磁盘读取查询需要的所有列，按照 orderby 列在 buffer 对它们进行排序，然后扫描排序后的列表进行输出， 它的效率更快一些，避免了第二次读取数据，并且把随机 IO 变成顺序 IO，但是它会使用更多的空间， 因为它把每一行都保存在内存中了。")]),t._v(" "),e("p",[t._v("当我们无可避免要使用排序时，索引层面没法在优化的时候又该怎么办呢？尽可能让 MySQL 选择使用第二种单路算法来进行排序。这样可以减少大量的随机 IO 操作,很大幅度地提高排序工作的效率。")]),t._v(" "),e("h2",{attrs:{id:"explain语句"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#explain语句"}},[t._v("#")]),t._v(" explain语句")]),t._v(" "),e("h3",{attrs:{id:"用法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#用法"}},[t._v("#")]),t._v(" 用法")]),t._v(" "),e("div",{staticClass:"language-sql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[t._v("explan "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// select查询语句")]),t._v("\n")])])]),e("p",[e("img",{attrs:{src:"https://walegarrett-image-1304556108.cos.ap-chengdu.myqcloud.com/markdown_img/202203271240104.png",alt:"img"}})]),t._v(" "),e("h3",{attrs:{id:"id"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#id"}},[t._v("#")]),t._v(" id")]),t._v(" "),e("p",[t._v("是一组数字，代表多个表之间的查询顺序，或者包含子句查询语句中的顺序，id 总共分为三种情况，依次详解")]),t._v(" "),e("ul",[e("li",[t._v("id 相同，执行顺序由上至下")]),t._v(" "),e("li",[t._v("id 不同，"),e("strong",[t._v("如果是子查询，id 号会递增，id 值越大优先级越高，越先被执行")])]),t._v(" "),e("li",[t._v("id 相同和不同的情况同时存在")])]),t._v(" "),e("h3",{attrs:{id:"select-type"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#select-type"}},[t._v("#")]),t._v(" select_type")]),t._v(" "),e("p",[t._v("select_type 包含以下几种值")]),t._v(" "),e("ul",[e("li",[t._v("simple：简单的select查询，查询中不包括子查询或者union查询")]),t._v(" "),e("li",[t._v("primary：如果select包含子查询，子查询的最外层会被标记为primary")]),t._v(" "),e("li",[t._v("subquery："),e("strong",[t._v("在select或者where字段中包含子查询")]),t._v("，子查询被标记为subquery")]),t._v(" "),e("li",[t._v("derived：在from中包含的子查询，会被标记为drived（衍生查询）")]),t._v(" "),e("li",[t._v("union：如果有两个 select 查询语句，他们之间用 union 连起来查询，那么"),e("strong",[t._v("第二个 select 会被标记为 union")])]),t._v(" "),e("li",[t._v("union result："),e("strong",[t._v("union 的结果")]),t._v("被标记为 union result，它的 id 被标记为null")])]),t._v(" "),e("h3",{attrs:{id:"type"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#type"}},[t._v("#")]),t._v(" type")]),t._v(" "),e("p",[t._v("type表示的是扫描方式，代表 MySQL 使用了哪种索引类型，不同的索引类型的查询效率是不一样的")]),t._v(" "),e("ul",[e("li",[t._v("system：系统表，少量数据，往往不需要进行磁盘IO")]),t._v(" "),e("li",[t._v("const：常量连接")]),t._v(" "),e("li",[t._v("eq_ref：主键索引(primary key)或者非空唯一索引(unique not null)等值扫描")]),t._v(" "),e("li",[t._v("ref：非主键非唯一索引等值扫描")]),t._v(" "),e("li",[t._v("range：范围扫描")]),t._v(" "),e("li",[t._v("index：索引树扫描")]),t._v(" "),e("li",[t._v("ALL：全表扫描(full table scan)")])]),t._v(" "),e("p",[e("strong",[t._v("type扫描方式由快到慢：")])]),t._v(" "),e("p",[t._v("system > const > eq_ref > ref > range > index > ALL")]),t._v(" "),e("h4",{attrs:{id:"system"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#system"}},[t._v("#")]),t._v(" system")]),t._v(" "),e("p",[t._v("从系统库mysql的系统标proxies_priv里查询数据，这里的数据在Mysql服务启动时候已经加载在内存中，不需要进行磁盘IO。")]),t._v(" "),e("p",[t._v("官方文档中的解释：该表只有一行（=系统表）。这是const联接类型的特例")]),t._v(" "),e("h4",{attrs:{id:"const"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#const"}},[t._v("#")]),t._v(" const")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://walegarrett-image-1304556108.cos.ap-chengdu.myqcloud.com/markdown_img/202203271240917.png",alt:"img"}})]),t._v(" "),e("p",[t._v("上例中id是主键(primary key)，连接部分是常量1，通过索引一次就能找到，速度非常快")]),t._v(" "),e("p",[t._v("场景：")]),t._v(" "),e("ul",[e("li",[t._v("命中主键(primary key)或者唯一索引(unique)")]),t._v(" "),e("li",[t._v("被连接的部分是一个常量值(const)")])]),t._v(" "),e("h4",{attrs:{id:"eq-ref-唯一索引扫描"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#eq-ref-唯一索引扫描"}},[t._v("#")]),t._v(" eq_ref-唯一索引扫描")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://walegarrett-image-1304556108.cos.ap-chengdu.myqcloud.com/markdown_img/202203271240264.png",alt:"img"}})]),t._v(" "),e("p",[t._v("上例中对于前表user表（id是主键）中的每一行（row），对应后user_balance表（uid是主键）只有一行被扫描，这类扫描的速度也非常的快")]),t._v(" "),e("p",[t._v("场景：")]),t._v(" "),e("ol",[e("li",[t._v("联表(join)查询")]),t._v(" "),e("li",[t._v("命中主键(primary key)或者非空唯一索引(unique not null)")]),t._v(" "),e("li",[t._v("等值连接")])]),t._v(" "),e("h4",{attrs:{id:"ref-非唯一索引扫描"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ref-非唯一索引扫描"}},[t._v("#")]),t._v(" ref-非唯一索引扫描")]),t._v(" "),e("p",[e("strong",[t._v("联表查询")])]),t._v(" "),e("p",[e("img",{attrs:{src:"https://walegarrett-image-1304556108.cos.ap-chengdu.myqcloud.com/markdown_img/202203271240632.png",alt:"img"}})]),t._v(" "),e("p",[t._v("当user_balance的**uid改为普通非唯一索引（index）**后，对于前表user表的每一行(row)，后表user_balance表可能有多于一行的数据被扫描")]),t._v(" "),e("p",[e("strong",[t._v("单表查询")])]),t._v(" "),e("p",[e("img",{attrs:{src:"https://walegarrett-image-1304556108.cos.ap-chengdu.myqcloud.com/markdown_img/202203271240156.png",alt:"img"}})]),t._v(" "),e("p",[t._v("当user_balance的**uid改为普通非唯一索引（index）**后，"),e("strong",[t._v("常量的连接查询，也由const降级为了ref，因为非唯一索引所以有多于一行的数据被可能被扫描")])]),t._v(" "),e("p",[t._v("ref每一次匹配可能有多行数据返回，虽然它比eq_ref要慢，但它仍然是一个很快的join类型")]),t._v(" "),e("p",[t._v("场景：")]),t._v(" "),e("ul",[e("li",[t._v("联表查询")]),t._v(" "),e("li",[t._v("普通非唯一索引")])]),t._v(" "),e("h4",{attrs:{id:"range"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#range"}},[t._v("#")]),t._v(" range")]),t._v(" "),e("p",[t._v("range比较好理解，它是索引上的范围查询，它会在索引上扫码特定范围内的值，一般出现在 where 条件中的 between、and、<、>、in 等范围查找中。")]),t._v(" "),e("h4",{attrs:{id:"index"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#index"}},[t._v("#")]),t._v(" index")]),t._v(" "),e("p",[t._v("index类型，需要"),e("strong",[t._v("扫描索引上的全部数据")]),t._v("，它仅比全表扫描快一点")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://walegarrett-image-1304556108.cos.ap-chengdu.myqcloud.com/markdown_img/202203271241915.png",alt:"img"}})]),t._v(" "),e("h4",{attrs:{id:"all"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#all"}},[t._v("#")]),t._v(" ALL")]),t._v(" "),e("p",[t._v("如果id上不建索引,则全表扫描")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://walegarrett-image-1304556108.cos.ap-chengdu.myqcloud.com/markdown_img/202203271240322.png",alt:"img"}})]),t._v(" "),e("h3",{attrs:{id:"possible-keys"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#possible-keys"}},[t._v("#")]),t._v(" possible_keys")]),t._v(" "),e("p",[t._v("此次查询中涉及字段上若存在索引，则会被列出来，表示可能会用到的索引，但并不是实际上一定会用到的索引")]),t._v(" "),e("h3",{attrs:{id:"key"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#key"}},[t._v("#")]),t._v(" key")]),t._v(" "),e("p",[t._v("此次查询中实际上用到的索引")]),t._v(" "),e("h3",{attrs:{id:"key-len"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#key-len"}},[t._v("#")]),t._v(" key_len")]),t._v(" "),e("p",[t._v("表示索引中使用的字节数，通过该属性可以知道在查询中使用的索引长度，注意：这个长度是最大可能长度，并非实际使用长度，在不损失精确性的情况下，长度越短查询效率越高")]),t._v(" "),e("h3",{attrs:{id:"ref"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ref"}},[t._v("#")]),t._v(" ref")]),t._v(" "),e("p",[t._v("显示关联的字段。如果使用常数等值查询，则显示 const，如果是连接查询，则会显示关联的字段。")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://walegarrett-image-1304556108.cos.ap-chengdu.myqcloud.com/markdown_img/202203271241000.png",alt:"img"}})]),t._v(" "),e("p",[t._v("上图中，user表的"),e("strong",[t._v("id字段是主键")]),t._v("，user_balance表的"),e("strong",[t._v("uid字段也是主键")]),t._v("，user的name字段是非唯一性普通索引")]),t._v(" "),e("ul",[e("li",[t._v("user表是非唯一性索引扫描（ref），实际使用的索引列为name，并且，由于user.name = 'zhangsan'的'zhangsan'是常量，所以ref字段为const。")]),t._v(" "),e("li",[t._v("user_balance表示唯一索引扫描，它实际使用了主键索引，索引关联的字段是user表的id字段。")])]),t._v(" "),e("h3",{attrs:{id:"rows"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#rows"}},[t._v("#")]),t._v(" rows")]),t._v(" "),e("p",[t._v("根据表信息统计以及索引的使用情况，大致估算说要找到所需记录需要读取的行数，rows 越小越好")]),t._v(" "),e("h3",{attrs:{id:"extra"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#extra"}},[t._v("#")]),t._v(" extra")]),t._v(" "),e("p",[t._v("根据表信息统计以及索引的使用情况，大致估算说要找到所需记录需要读取的行数，rows 越小越好")]),t._v(" "),e("h4",{attrs:{id:"using-filesort"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#using-filesort"}},[t._v("#")]),t._v(" using filesort")]),t._v(" "),e("ol",[e("li",[t._v('俗称 " 文件排序 " ，在数据量大的时候几乎是“九死一生”。')]),t._v(" "),e("li",[e("strong",[t._v("在 order by 或者在 group by 排序的过程中")]),t._v("，"),e("strong",[t._v("order by 的字段不是索引字段，或者 select 查询字段存在不是索引字段，或者 select 查询字段都是索引字段，但是 order by 字段和 select 索引字段的顺序不一致")]),t._v("，都会导致 fileSort")])]),t._v(" "),e("p",[e("img",{attrs:{src:"https://walegarrett-image-1304556108.cos.ap-chengdu.myqcloud.com/markdown_img/202203271241888.png",alt:"img"}})]),t._v(" "),e("p",[t._v("上图中的name字段不是索引字段，是普通字段。")]),t._v(" "),e("h4",{attrs:{id:"using-temporary"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#using-temporary"}},[t._v("#")]),t._v(" using temporary")]),t._v(" "),e("p",[t._v("使用了临时表保存中间结果，常见于 order by 和 group by 中。")]),t._v(" "),e("h4",{attrs:{id:"using-index"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#using-index"}},[t._v("#")]),t._v(" using index")]),t._v(" "),e("p",[t._v("表示相应的 "),e("strong",[t._v("select 操作中使用了覆盖索引（Coveing Index）")]),t._v(",避免访问了表的数据行，效率不错！ "),e("strong",[t._v("如果同时出现 using where，表明索引被用来执行索引键值的查找")]),t._v("；如果没有同时出现 using where，表面索引用来读取数据而非执行查找动作。")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://walegarrett-image-1304556108.cos.ap-chengdu.myqcloud.com/markdown_img/202203271241517.png",alt:"img"}})]),t._v(" "),e("p",[t._v("上图的"),e("strong",[t._v("name字段是普通非唯一性索引，id是主键")]),t._v("，这里使用了覆盖索引，避免了回表查询。")]),t._v(" "),e("h4",{attrs:{id:"using-where"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#using-where"}},[t._v("#")]),t._v(" using where")]),t._v(" "),e("p",[t._v("表明使用了 where 过滤")]),t._v(" "),e("h3",{attrs:{id:"参考"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[t._v("#")]),t._v(" 参考")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://cloud.tencent.com/developer/article/1672295",target:"_blank",rel:"noopener noreferrer"}},[t._v("MySQL索引优化，explain详细讲解 - 云+社区 - 腾讯云"),e("OutboundLink")],1)]),t._v(" "),e("p",[e("a",{attrs:{href:"https://juejin.cn/post/6844904149864169486",target:"_blank",rel:"noopener noreferrer"}},[t._v("Mysql Explain之type详解 - 掘金"),e("OutboundLink")],1)]),t._v(" "),e("h2",{attrs:{id:"总之"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#总之"}},[t._v("#")]),t._v(" 总之")]),t._v(" "),e("p",[t._v("Mysql的优化主要就在于：索引的优化，sql语句的优化，表的优化，在高并发网络环境下，除了优化数据库外，还会涉及到分布式缓存，CDN，数据库读写分离等高并发优化技术。")]),t._v(" "),e("p",[t._v("以上就是MySQL优化的介绍，更加"),e("strong",[t._v("详细深入的视频讲解")]),t._v("，请点击查看："),e("a",{attrs:{href:"https://mikechen.cc/collection/performance",target:"_blank",rel:"noopener noreferrer"}},[t._v("最强MySQL性能优化合集"),e("OutboundLink")],1)]),t._v(" "),e("h3",{attrs:{id:"参考-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#参考-2"}},[t._v("#")]),t._v(" 参考")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://cloud.tencent.com/developer/article/1698857",target:"_blank",rel:"noopener noreferrer"}},[t._v("最全MySQL性能优化—索引篇 - 云+社区 - 腾讯云"),e("OutboundLink")],1)]),t._v(" "),e("p",[e("a",{attrs:{href:"https://mikechen.cc/3941.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("史上最全大厂Java面试题库(2022最新版) – mikechen的互联网架构"),e("OutboundLink")],1)])])}),[],!1,null,null,null);a.default=_.exports}}]);