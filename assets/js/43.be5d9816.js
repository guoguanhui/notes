(window.webpackJsonp=window.webpackJsonp||[]).push([[43],{598:function(t,n,e){"use strict";e.r(n);var a=e(14),r=Object(a.a)({},(function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"springboot启动原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#springboot启动原理"}},[t._v("#")]),t._v(" SpringBoot启动原理")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://walegarrett-image-1304556108.cos.ap-chengdu.myqcloud.com/markdown_img/202203251701953.png",alt:"img"}})]),t._v(" "),e("p",[e("img",{attrs:{src:"https://walegarrett-image-1304556108.cos.ap-chengdu.myqcloud.com/markdown_img/202203251701870.png",alt:"img"}})]),t._v(" "),e("h5",{attrs:{id:"构造springapplication实例"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#构造springapplication实例"}},[t._v("#")]),t._v(" "),e("a",{attrs:{href:"http://notfound9.github.io/interviewGuide/#/docs/Spring?id=%E6%9E%84%E9%80%A0springapplication%E5%AE%9E%E4%BE%8B",target:"_blank",rel:"noopener noreferrer"}},[t._v("构造SpringApplication实例"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("首先会调用SpringApplication的静态方法run()，在这个方法里面会调用构造器方法创建出一个SpringApplication实例，在构造器中会确定当前web应用类型，是reactive web类型，还是servlet web类型，还是none类型。以及设置监听器等等，完成一些初始化操作。(监听器就是来监听SpringApplication启动过程的，在开始启动，创建上下文，启动失败等生命周期事件时都会调用监听器相关的方法)。")]),t._v(" "),e("h5",{attrs:{id:"执行run-方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#执行run-方法"}},[t._v("#")]),t._v(" "),e("a",{attrs:{href:"http://notfound9.github.io/interviewGuide/#/docs/Spring?id=%E6%89%A7%E8%A1%8Crun%E6%96%B9%E6%B3%95",target:"_blank",rel:"noopener noreferrer"}},[t._v("执行run()方法"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("然后去执行实例的run()方法，首先会创建一个StopWatch计时器，来统计run()方法的启动耗时，在日志里面会显示启动时间，那个时间就是在这里统计的。然后处理环境参数，就是java -jar ***.jar启动命令中带的那些jvm参数。")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://walegarrett-image-1304556108.cos.ap-chengdu.myqcloud.com/markdown_img/202203251701616.png",alt:"img"}})]),t._v(" "),e("h5",{attrs:{id:"创建applicationcontext-创建ioc容器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#创建applicationcontext-创建ioc容器"}},[t._v("#")]),t._v(" "),e("a",{attrs:{href:"http://notfound9.github.io/interviewGuide/#/docs/Spring?id=%E5%88%9B%E5%BB%BAapplicationcontext",target:"_blank",rel:"noopener noreferrer"}},[t._v("创建applicationContext"),e("OutboundLink")],1),t._v("-创建IoC容器")]),t._v(" "),e("p",[t._v("会创建出一个ApplicationContext，一般servlet的应用的context类型是AnnotationConfigServletWebServerApplicationContext。(可以认为beanFactory就是ioc容器，但是我们一般不直接使用beanFactory获取bean，而是通过applicationContext来获取，"),e("strong",[t._v("ioc容器beanFactory是应用上下文applicationContext的一个属性，applicationContext也实现了BeanFactory接口，可以认为applicationContext是一个高级容器，applicationContext支持国际化，默认是启动时加载所有bean，而不是用到时才进行懒加载，以及支持事件机制。)")])]),t._v(" "),e("h5",{attrs:{id:"执行preparecontext-方法-准备ioc容器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#执行preparecontext-方法-准备ioc容器"}},[t._v("#")]),t._v(" "),e("a",{attrs:{href:"http://notfound9.github.io/interviewGuide/#/docs/Spring?id=%E6%89%A7%E8%A1%8Cpreparecontext%E6%96%B9%E6%B3%95",target:"_blank",rel:"noopener noreferrer"}},[t._v("执行prepareContext()方法"),e("OutboundLink")],1),t._v("-准备IoC容器")]),t._v(" "),e("p",[t._v("然后会调用prepareContext()方法来为应用上下文做一些准备工作，会将运行时的参数封装成bean，注册到beanFactory中去，以及使用load方法加载启动类。")]),t._v(" "),e("h5",{attrs:{id:"执行refreshcontext-方法-启动ioc容器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#执行refreshcontext-方法-启动ioc容器"}},[t._v("#")]),t._v(" "),e("a",{attrs:{href:"http://notfound9.github.io/interviewGuide/#/docs/Spring?id=%E6%89%A7%E8%A1%8Crefreshcontext%E6%96%B9%E6%B3%95",target:"_blank",rel:"noopener noreferrer"}},[t._v("执行refreshContext()方法"),e("OutboundLink")],1),t._v("-启动IoC容器")]),t._v(" "),e("p",[t._v("在这里会启动容器，也就是会为beanFactory做很多配置，注册BeanPostProcessors，设置类加载器等等。"),e("strong",[t._v("在这一步也会解析启动类中@SpringBootApplication这个组合注解。")])]),t._v(" "),e("h5",{attrs:{id:"afterrefresh-方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#afterrefresh-方法"}},[t._v("#")]),t._v(" "),e("a",{attrs:{href:"http://notfound9.github.io/interviewGuide/#/docs/Spring?id=afterrefresh%E6%96%B9%E6%B3%95",target:"_blank",rel:"noopener noreferrer"}},[t._v("afterRefresh()方法"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("这个方法里面会把容器里面所有ApplicationRunner自定义子类和CommandLineRunner自定义子类的Bean全部取出来，执行它们的run()方法。(就是有时候如果需要在应用启动后执行一些我们自定义的初始化操作，可以通过自定义一个类，继承ApplicationRunner类来实现。)")]),t._v(" "),e("p",[t._v("之后会调用listeners.started()方法，通知所有Listener，application已经启动完成了，以及调用listeners.running()方法通知所有Listener，application已经运行了。")]),t._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//系统启动完可以做一些业务操作")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Component")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//如果有多个runner需要指定一些顺序")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Order")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SimosApplicationRunner")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ApplicationRunner")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Autowired")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SystemInitService")]),t._v(" systemInitService"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("run")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ApplicationArguments")]),t._v(" args"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Exception")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        systemInitService"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("systemInit")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("h3",{attrs:{id:"参考"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[t._v("#")]),t._v(" 参考")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://my.oschina.net/funcy/blog/4873261",target:"_blank",rel:"noopener noreferrer"}},[t._v("springboot 源码分析系列文章汇总 - Funcy1122的个人空间 - OSCHINA - 中文开源技术交流社区"),e("OutboundLink")],1)]),t._v(" "),e("p",[e("a",{attrs:{href:"https://cloud.tencent.com/developer/article/1761068",target:"_blank",rel:"noopener noreferrer"}},[t._v("头秃系列，二十三张图带你从源码分析Spring Boot 启动流程~ - 云+社区 - 腾讯云"),e("OutboundLink")],1)]),t._v(" "),e("p",[e("a",{attrs:{href:"https://www.cnblogs.com/theRhyme/p/11057233.html#_label2",target:"_blank",rel:"noopener noreferrer"}},[t._v("SpringBoot启动流程及其原理 - rhyme - 博客园"),e("OutboundLink")],1)])])}),[],!1,null,null,null);n.default=r.exports}}]);