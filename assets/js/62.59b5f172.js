(window.webpackJsonp=window.webpackJsonp||[]).push([[62],{618:function(s,t,a){"use strict";a.r(t);var n=a(14),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"文件的复制移动"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#文件的复制移动"}},[s._v("#")]),s._v(" 文件的复制移动")]),s._v(" "),a("h3",{attrs:{id:"cp-复制文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cp-复制文件"}},[s._v("#")]),s._v(" cp 复制文件")]),s._v(" "),a("p",[s._v("复制文件的格式为：")]),s._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("cp")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("source")]),s._v(" destination\n")])])]),a("p",[s._v("当 source 和 destination 参数都是文件名时，cp 命令将源文件复制成一个新文件，并且以 destination 命名。新文件就像全新的文件一样，有新的修改时间。")]),s._v(" "),a("p",[a("strong",[s._v("如果目标文件已经存在，cp 命令并不会提醒这一点")]),s._v("。最好是加上"),a("code",[s._v("-i")]),s._v("选项，强制 shell 询问是否需要覆盖已有文件。")]),s._v(" "),a("p",[s._v("也可以将文件复制到现有目录中。")]),s._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("cp")]),s._v(" -i test_one /home/christine/Documents/\n")])])]),a("p",[s._v("新文件就出现在目录 Documents 中了，和源文件同名。")]),s._v(" "),a("blockquote",[a("p",[s._v("==上面的例子在目标目录名尾部加上了一个正斜线（/），这表明 Documents 是目录而非文件。这有助于明确目的，而且在复制单个文件时非常重要。如果没有使用正斜线，子目录/home/christine/Documents 又不存在，就会有麻烦。在这种情况下，试图将一个文件复制到 Documents 子目录反而会创建一个名为 Documents 的文件，连错误消息都不会显示！==")])]),s._v(" "),a("p",[s._v("上一个例子采用了绝对路径，不过也可以使用相对路径。")]),s._v(" "),a("p",[s._v("本章在前面介绍了特殊符号可以用在相对文件路径中。其中的单点符（.）就很适合用于 cp 命令。记住，单点符表示当前工作目录。如果需要将一个带有很长的源对象名的文件复制到当前工作目录中时，单点符能够简化该任务。如果你的源对象名很长，使用单点符要比输入完整的目标对象名省事得多。")]),s._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("cp")]),s._v(" -i /etc/NetworkManager/NetworkManager.conf "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v("\n")])])]),a("p",[a("strong",[s._v("==cp 命令的 -R 参数威力强大。可以用它在一条命令中递归地复制整个目录的内容：==")])]),s._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v(" -Fd *Scripts "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#-d选项只列出目录本身的信息，不列出其中的内容。一般可与 l 选项搭配显示目录自身详情")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("cp")]),s._v(" -R Scripts/  Mod_Scripts\n")])])]),a("p",[s._v("在执行 cp -R 命令之前，目录 Mod_Scripts 并不存在。它是随着 cp -R 命令被创建的，整个 Scripts 目录中的内容都被复制到其中。注意，在新的 Mod_Scripts 目录中，所有的文件都有对应的新日期。Mod_Scripts 目录现在已经成为了 Scripts 目录的完整副本。")]),s._v(" "),a("p",[s._v("也可以在 cp 命令中使用通配符：")]),s._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("cp")]),s._v(" *script  Mod_Scripts/\n")])])]),a("p",[s._v("该命令将所有以 script 结尾的文件复制到 Mod_Scripts 目录中。")]),s._v(" "),a("h3",{attrs:{id:"mv-移动-重命名文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mv-移动-重命名文件"}},[s._v("#")]),s._v(" mv 移动/重命名文件")]),s._v(" "),a("p",[s._v("在 Linux 中，重命名文件称为移动（moving）。mv 命令可以将文件和目录移动到另一个位置或重新命名。")]),s._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("mv")]),s._v(" fall  fzll "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#重命名")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("mv")]),s._v(" fzll  Pictures/   "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#把文件fzll从/home/testuser移动到了/home/testuser/Pirctures")]),s._v("\n")])])]),a("p",[s._v("注意，mv 将文件名从 fall 更改为 fzll，但 inode 编号和时间戳保持不变。这是因为 mv 只影响文件名。 和 cp 命令类似，也可以在 mv 命令中使用"),a("code",[s._v("-i")]),s._v("参数。这样在命令试图覆盖已有的文件时，你就会得到提示。")]),s._v(" "),a("p",[a("strong",[s._v("也可以使用 mv 命令移动文件位置并修改文件名称，这些操作只需一步就能完成：")])]),s._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("mv")]),s._v(" /home/testuser/Pictures/fzll  /home/testuser/fall\n")])])]),a("p",[a("strong",[s._v("==也可以使用 mv 命令移动整个目录及其内容：==")])]),s._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("mv")]),s._v(" Mod_Scripts  Old_Scripts\n")])])]),a("h2",{attrs:{id:"文件的查看"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#文件的查看"}},[s._v("#")]),s._v(" 文件的查看")]),s._v(" "),a("p",[s._v("可用 file 命令确定文件的文件类型。")]),s._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("file")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(".txt\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(".txt: ASCII text  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#file命令不仅能确定文件中包含的文本信息，还能确定该文本文件的字符编码，ASCII")]),s._v("\n")])])]),a("p",[s._v("常见的文件类型还有很多类型，比如下面几种")]),s._v(" "),a("ul",[a("li",[s._v("directory 目录")]),s._v(" "),a("li",[s._v("symbolic link to 'data_file' 符号链接")]),s._v(" "),a("li",[s._v("Bourne-Again shell script，ASCII text executable 脚本文件")]),s._v(" "),a("li",[s._v("/usr/bin/ls: ELF 64-bit LSB executable，x86-64，version 1 (SYSV)，dynamically linked (uses shared libs)，for GNU/Linux 2.6.24"),a("br"),s._v("\n二进制可执行程序。file 命令能够确定该程序编译时所面向的平台以及需要何种类型的库。如果你有从未知源处获得的二进制文件，这会是个非常有用的特性")]),s._v(" "),a("li",[s._v("JSON data")])]),s._v(" "),a("p",[s._v("知道如何查看文件类型后，接下来学习"),a("strong",[s._v("如何查看文件内容。几个常见的命令是 cat，more 与 less。more 命令目前已经和 less 一样支持上下翻页，基本没有区别了")]),s._v("。对于查看单个完整文件，群主更偏向直接使用 vim 查看。")]),s._v(" "),a("h3",{attrs:{id:"tail-查看文件尾"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tail-查看文件尾"}},[s._v("#")]),s._v(" tail 查看文件尾")]),s._v(" "),a("p",[a("strong",[s._v("==有时存在一些巨型文件，如有些日志文件可以达到几十 GB 之大，这时候如果还整体查看文件，可能直接把 vim 等程序卡死了。此时需要的就是查看部分文件。常用的命令为 tail 和 head。==")])]),s._v(" "),a("p",[s._v("更常见的场景是查看文件的末尾，如日志的末尾，查看最新产生的内容。默认情况是查看此文件最后十行的内容。")]),s._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("tail")]),s._v(" log_file\n")])])]),a("p",[s._v("可以向 tail 命令中加入-n 参数来修改所显示的行数。"),a("strong",[s._v("在下面的例子中，通过加入-n 2 使 tail 命令只显示文件的最后两行：")])]),s._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("tail")]),s._v(" -n "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" log_file\n")])])]),a("p",[s._v("**==-f 参数是 tail 命令的一个突出特性。它允许你在其他进程使用该文件时查看文件的内容。tail 命令会保持活动状态，并不断显示添加到文件中的内容。==**这是实时监测系统日志的绝妙方式。")]),s._v(" "),a("h3",{attrs:{id:"head-查看文件头"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#head-查看文件头"}},[s._v("#")]),s._v(" head 查看文件头")]),s._v(" "),a("p",[s._v("head 命令，顾名思义，会显示文件开头那些行的内容。默认情况下，它会显示文件前 10 行的文本。类似于 tail 命令，它也支持-n 参数，这样就可以指定想要显示的内容了。")]),s._v(" "),a("p",[a("strong",[s._v("==这两个命令都允许你在破折号后面直接输入想要显示的行数：==")])]),s._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("head")]),s._v(" log_file\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("head")]),s._v(" -5 log_file\n")])])]),a("h2",{attrs:{id:"进程相关"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#进程相关"}},[s._v("#")]),s._v(" 进程相关")]),s._v(" "),a("p",[s._v("当程序运行在系统上时，我们称之为进程（process）。想监测这些进程，需要熟悉 ps/top 等命令的用法。ps 命令好比工具中的瑞士军刀，它能输出运行在系统上的所有程序的许多信息。而 top 可以监控当前各个进程的运行状态，以及占用 cpu，内存等系统资源的情况。")]),s._v(" "),a("h3",{attrs:{id:"ps-查看进程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ps-查看进程"}},[s._v("#")]),s._v(" ps 查看进程")]),s._v(" "),a("p",[a("strong",[s._v("默认情况下，ps 命令只会显示运行在当前控制台下的属于当前用户的进程")]),s._v("。直接执行 ps 命令，可以发现我们只运行了 bash shell（注意，shell 也只是运行在系统上的另一个程序而已）以及 ps 命令本身。可以看到基本输出显示了程序的进程 ID（Process ID，PID）、它们运行在哪个终端（TTY）以及进程已用的 CPU 时间。")]),s._v(" "),a("p",[s._v("Linux 系统中使用的 GNU ps 命令支持 3 种不同类型的命令行参数：")]),s._v(" "),a("ul",[a("li",[s._v("Unix 风格的参数，前面加单破折线；Unix 风格的参数是从贝尔实验室开发的 AT&T Unix 系统上原有的 ps 命令继承下来的。")]),s._v(" "),a("li",[s._v("BSD 风格的参数，前面不加破折线；伯克利软件发行版（Berkeley software distribution，BSD）是加州大学伯克利分校开发的一个 Unix 版本。它和 AT & T Unix 系统有许多细小的不同")]),s._v(" "),a("li",[s._v("GNU 风格的长参数，前面加双破折线。")])]),s._v(" "),a("hr"),s._v(" "),a("p",[s._v("Unix 风格一些常用的参数组合：")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ps")]),s._v(" -ef "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#查看系统上运行的所有进程  -e参数指定显示所有运行在系统上的进程；-f参数则扩展了输出，这些扩展的列包含了有用的信息。")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("UID")]),s._v("        PID  "),a("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("PPID")]),s._v("  C STIME TTY          TIME CMD\nroot         "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("11")]),s._v(":29 ?        00:00:01 /sbin/init\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n")])])]),a("ul",[a("li",[s._v("UID：启动这些进程的用户。")]),s._v(" "),a("li",[s._v("PID：进程的进程 ID。")]),s._v(" "),a("li",[s._v("PPID："),a("strong",[s._v("父进程的进程号")]),s._v("（如果该进程是由另一个进程启动的）。")]),s._v(" "),a("li",[s._v("C：进程生命周期中的 CPU 利用率。")]),s._v(" "),a("li",[s._v("STIME：进程启动时的系统时间。")]),s._v(" "),a("li",[s._v("TTY：进程启动时的终端设备。")]),s._v(" "),a("li",[s._v("TIME：运行进程需要的累计 CPU 时间。")]),s._v(" "),a("li",[s._v("CMD：启动的程序名称。")])]),s._v(" "),a("p",[a("strong",[s._v("如果想要获得更多的信息，可采用-l 参数，它会产生一个长格式输出。")])]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ps")]),s._v(" -l\nF S  "),a("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("UID")]),s._v(" PID  "),a("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("PPID")]),s._v("  C PRI  NI ADDR SZ WCHAN  TTY      TIME   CMD\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" S  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("500")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3081")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3080")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" -  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1173")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("wait")]),s._v(" pts/0   00:00:00 "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("bash")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" R  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("500")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4463")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3081")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" -  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1116")]),s._v(" -    pts/0   00:00:00 "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ps")]),s._v("\n")])])]),a("p",[s._v("注意使用了-l 参数之后多出的那些列。")]),s._v(" "),a("ul",[a("li",[s._v("F：内核分配给进程的系统标记。1 代表 进程被 fork 但没有被执行。4 代表使用了超级管理员的权限。5 代表 1 和 4 都做了。0 没有任何特殊含义，含义为进程被 fork 了，也确实执行了，并且没有超级用户权限。")]),s._v(" "),a("li",[a("strong",[s._v("S：进程的状态（S 代表在休眠；R 代表正在运行，或正等待运行；Z 代表僵化，进程已结束但父进程已不存在；T 代表停止，I 代表 idle 进程）。")])]),s._v(" "),a("li",[s._v("PRI：进程的优先级（越大的数字代表越低的优先级）。")]),s._v(" "),a("li",[s._v("NI：谦让度值用来参与决定优先级。越大优先级越低。")]),s._v(" "),a("li",[s._v("ADDR：进程的内存地址。正在运行的任务将在此列中显示一个破折号（'-'）")]),s._v(" "),a("li",[s._v("SZ：所需物理内存页面的大致大小。详情看 vsz 与 rss")]),s._v(" "),a("li",[s._v("WCHAN：进程休眠的内核函数的地址。")])]),s._v(" "),a("hr"),s._v(" "),a("p",[s._v("在使用 BSD 参数时，ps 命令会自动改变输出以模仿 BSD 格式。大部分的输出列跟使用 Unix 风格参数时的输出是一样的，只有一小部分不同。")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ps")]),s._v(" l\nF  "),a("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("UID")]),s._v("  PID "),a("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("PPID")]),s._v(" PRI  NI  VSZ  RSS WCHAN  STAT TTY      TIME COMMAND\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("500")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3081")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3080")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4692")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1432")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("wait")]),s._v("   Ss   pts/0    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":00 -bash\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("500")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5104")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3081")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4468")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("844")]),s._v(" -      R+   pts/0    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":00 "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ps")]),s._v(" l\n")])])]),a("ul",[a("li",[s._v("VSZ：进程的虚拟内存大小，以千字节（KB）为单位。")]),s._v(" "),a("li",[s._v("RSS：常驻集大小，进程在未换出时占用的物理内存。")]),s._v(" "),a("li",[s._v("STAT：代表当前进程状态的双字符状态码。")])]),s._v(" "),a("p",[s._v("许多系统管理员都喜欢 BSD 风格的 l 参数。它能输出更详细的进程状态码（STAT 列）。双字符状态码能比 Unix 风格输出的单字符状态码更清楚地表示进程的当前状态。第一个字符采用了和 Unix 风格 S 列相同的值，表明进程是在休眠、运行还是等待。第二个参数进一步说明进程的状态。")]),s._v(" "),a("ul",[a("li",[s._v("<：该进程运行在高优先级上。")]),s._v(" "),a("li",[s._v("N：该进程运行在低优先级上。")]),s._v(" "),a("li",[s._v("L：该进程有页面锁定在内存中。")]),s._v(" "),a("li",[s._v("s：该进程是控制进程。")]),s._v(" "),a("li",[s._v("l：该进程是多线程的。")]),s._v(" "),a("li",[s._v("+：该进程运行在前台。")])]),s._v(" "),a("p",[s._v("从前面的例子可以看出，bash 命令处于休眠状态，但同时它也是一个控制进程（在我的会话中，它是主要进程），而 ps 命令则运行在系统的前台。")]),s._v(" "),a("hr"),s._v(" "),a("p",[s._v("最后，GNU 开发人员在这个新改进过的 ps 命令中加入了另外一些参数。其中一些 GNU 长参数复制了现有的 Unix 或 BSD 类型的参数，而另一些则提供了新功能。")]),s._v(" "),a("p",[s._v("可以将 GNU 长参数和 Unix 或 BSD 风格的参数混用来定制输出。GNU 长参数中一个着实让人喜爱的功能就是--forest 参数。它会显示进程的层级信息，并用 ASCII 字符绘出可爱的图表。这种格式让跟踪子进程和父进程变得十分容易。")]),s._v(" "),a("h3",{attrs:{id:"top-监控进程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#top-监控进程"}},[s._v("#")]),s._v(" top 监控进程")]),s._v(" "),a("p",[s._v("ps 命令虽然在收集运行在系统上的进程信息时非常有用，但也有不足之处："),a("strong",[s._v("它只能显示某个特定时间点的信息")]),s._v("。如果想观察那些频繁换进换出的内存的进程趋势，用 ps 命令就不方便了。而 top 命令刚好适用这种情况。=="),a("strong",[s._v("top 命令跟 ps 命令相似，能够显示进程信息，但它是实时显示的")]),s._v("。==")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("xbren@archlinux:~$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("top")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("top")]),s._v(" - 00:01:04 up "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("38")]),s._v(" min,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" users,  load average: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.52")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.58")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.59")]),s._v("\nTasks:   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v(" total,   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" running,   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" sleeping,   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" stopped,   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" zombie\n%Cpu"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(":  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.5")]),s._v(" us,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.8")]),s._v(" sy,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" ni, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("98.7")]),s._v(" id,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" wa,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" hi,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" si,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" st\nMiB Mem "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("16042.5")]),s._v(" total,   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8472.3")]),s._v(" free,   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7346.2")]),s._v(" used,    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("224.0")]),s._v(" buff/cache\nMiB Swap:  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("49152.0")]),s._v(" total,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("49099.5")]),s._v(" free,     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("52.5")]),s._v(" used.   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8565.7")]),s._v(" avail Mem\n\n  PID "),a("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("USER")]),s._v("      PR  NI    VIRT    RES    SHR S  %CPU  %MEM     TIME+ COMMAND\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" root      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9216")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("660")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("320")]),s._v(" S   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":00.18 init\n "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5115")]),s._v(" root      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9308")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("240")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("176")]),s._v(" S   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":00.00 init\n "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5116")]),s._v(" xbren     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("19280")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4808")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4704")]),s._v(" S   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":00.81 "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("bash")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5606")]),s._v(" xbren     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("18920")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2148")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1528")]),s._v(" R   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":00.04 "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("top")]),s._v("\n")])])]),a("p",[s._v("输出的分上下两部分。第一部分显示的是系统的概况。第二部分显示了进程的实时概要信息。")]),s._v(" "),a("p",[s._v("第一部分的第一行显示了当前时间、系统的运行时间、登录的用户数以及系统的平均负载。平均负载有 3 个值：最近 1 分钟的、最近 5 分钟的和最近 15 分钟的平均负载。值越大说明系统的负载越高。由于进程短期的突发性活动，出现最近 1 分钟的高负载值也很常见，但如果近 15 分钟内的平均负载都很高，就说明系统可能有问题。")]),s._v(" "),a("p",[s._v("Linux 系统管理的要点在于定义究竟到什么程度才算是高负载。这个值取决于系统的硬件配置以及系统上通常运行的程序。对某个系统来说是高负载的值可能对另一系统来说就是正常值。在单核机器上，负载的意义是这样的，比如最近十五分钟的负载值为 5.09，含义为计算机的平均过载为 409％。平均而言，有 4.09 个进程在等待 CPU。通常对于单核机器来说，如果系统的负载值超过了 2，就说明系统比较繁忙了。但是对于多核机器来说，就不是这样计算的了。例如，如果在单 CPU 系统上的平均负载为 2，则意味着系统过载了 100％，在整个时间段内，一个进程正在使用 CPU，而另一个进程正在等待。在具有两个 CPU 的系统上，含义为两个不同的进程始终使用两个不同的 CPU。在具有四个 CPU 的系统上，这将代表只有 50%的使用率-两个进程使用两个 CPU，而两个 CPU 处于空闲状态。")]),s._v(" "),a("p",[s._v("第二行显示了进程概要信息——top 命令的输出中将进程叫作任务（task）：有多少进程处在运行、休眠、停止或是僵化状态（僵化状态是指进程完成了，但父进程没有响应）。")]),s._v(" "),a("p",[s._v("下一行显示了 CPU 使用的概要信息。由前到后分别为：用户态使用率，内核态使用率，用做 nice 加权的进程分配的用户态 cpu 使用率，空闲的 cpu 使用率，等待磁盘写入完成时间比，硬件中断消耗时间，软件中断消耗时间，为处理其他进程而从虚拟机中偷走的 cpu 时间（仅虚拟机）。")]),s._v(" "),a("p",[s._v("紧跟其后的两行说明了系统内存的状态。第一行说的是系统的物理内存：总共有多少内存，还有多少空闲，当前用了多少，缓存占用了多少。后一行说的是同样的信息，不过是针对系统交换空间（如果分配了的话）的状态而言的。")]),s._v(" "),a("hr"),s._v(" "),a("p",[s._v("第二部分显示了当前运行中的进程的详细列表，有些列跟 ps 命令的输出类似。给出一些未出现过的列的解释")]),s._v(" "),a("ul",[a("li",[s._v("USER：进程属主的名字。")]),s._v(" "),a("li",[s._v("PR：进程的优先级。")]),s._v(" "),a("li",[s._v("NI：进程的谦让度值。")]),s._v(" "),a("li",[s._v("VIRT：进程占用的虚拟内存总量。")]),s._v(" "),a("li",[s._v("RES：进程占用的物理内存总量。")]),s._v(" "),a("li",[s._v("SHR：进程和其他进程共享的内存总量。")]),s._v(" "),a("li",[s._v("S：进程的状态（D 代表可中断的休眠状态，R 代表在运行状态，S 代表休眠状态，T 被任务控制信号终止的停止状态，t 代表被 debugger 在跟踪时终止的停止状态，Z 代表僵化状态，I 代表 idle 空闲）。")]),s._v(" "),a("li",[s._v("%CPU：进程使用的 CPU 时间比例。")]),s._v(" "),a("li",[s._v("%MEM：进程使用的内存占可用内存的比例。")]),s._v(" "),a("li",[s._v("TIME+：自进程启动到目前为止的 CPU 时间总量。")]),s._v(" "),a("li",[s._v("COMMAND：进程所对应的命令行名称，也就是启动的程序名")])]),s._v(" "),a("p",[s._v("默认情况下，top 命令在启动时会按照 %CPU 值对进程排序。可以在 top 运行时使用多种交互命令重新排序。每个交互式命令都是单字符，在 top 命令运行时键入可改变 top 的行为。"),a("strong",[s._v("键入 f 允许你选择对输出进行排序的字段，键入 d 允许你修改轮询间隔。键入 q 可以退出 top")]),s._v("。用户在 top 命令的输出上有很大的控制权。用这个工具就能经常找出占用系统大部分资源的罪魁祸首。当然了，一旦找到，下一步就是结束这些进程。这也正是接下来的话题。")]),s._v(" "),a("h3",{attrs:{id:"kill-发送信号"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#kill-发送信号"}},[s._v("#")]),s._v(" kill 发送信号")]),s._v(" "),a("p",[s._v("作为系统管理员，很重要的一个技能就是知道何时以及如何结束一个进程。有时进程挂起了，只需要动动手让进程重新运行或结束就行了。但有时，有的进程会耗尽 CPU 且不释放资源。在这两种情景下，你就需要能控制进程的命令。Linux 沿用了 Unix 进行进程间通信的方法。")]),s._v(" "),a("p",[s._v("在 Linux 中，进程之间通过信号来通信。进程的信号就是预定义好的一个消息，进程能识别它并决定忽略还是作出反应。进程如何处理信号是由开发人员通过编程来决定的。大多数编写完善的程序都能接收和处理标准 Unix 进程信号。这些信号列举如下。")]),s._v(" "),a("table",[a("thead",[a("tr",[a("th",[s._v("信号")]),s._v(" "),a("th",[s._v("名称")]),s._v(" "),a("th",[s._v("描述")])])]),s._v(" "),a("tbody",[a("tr",[a("td",[s._v("1")]),s._v(" "),a("td",[s._v("HUP")]),s._v(" "),a("td",[s._v("挂起")])]),s._v(" "),a("tr",[a("td",[s._v("2")]),s._v(" "),a("td",[s._v("INT")]),s._v(" "),a("td",[s._v("中断")])]),s._v(" "),a("tr",[a("td",[s._v("3")]),s._v(" "),a("td",[s._v("QUIT")]),s._v(" "),a("td",[s._v("结束运行")])]),s._v(" "),a("tr",[a("td",[s._v("9")]),s._v(" "),a("td",[s._v("KILL")]),s._v(" "),a("td",[s._v("无条件终止")])]),s._v(" "),a("tr",[a("td",[s._v("11")]),s._v(" "),a("td",[s._v("SEGV")]),s._v(" "),a("td",[s._v("段错误")])]),s._v(" "),a("tr",[a("td",[s._v("15")]),s._v(" "),a("td",[s._v("TERM")]),s._v(" "),a("td",[s._v("尽可能终止")])]),s._v(" "),a("tr",[a("td",[s._v("17")]),s._v(" "),a("td",[s._v("STOP")]),s._v(" "),a("td",[s._v("无条件停止运行，但不终止")])]),s._v(" "),a("tr",[a("td",[s._v("18")]),s._v(" "),a("td",[s._v("TSTP")]),s._v(" "),a("td",[s._v("停止或暂停，但继续在后台运行")])]),s._v(" "),a("tr",[a("td",[s._v("19")]),s._v(" "),a("td",[s._v("CONT")]),s._v(" "),a("td",[s._v("在 STOP 或 TSTP 之后恢复执行")])])])]),s._v(" "),a("p",[s._v("在 Linux 上有两个命令可以向运行中的进程发出进程信号。")]),s._v(" "),a("p",[a("strong",[s._v("kill 命令可通过进程 ID（PID）给进程发信号")]),s._v("。默认情况下，kill 命令会向命令行中列出的全部 PID 发送一个 TERM 信号。遗憾的是，你只能用进程的 PID 而不能用命令名，所以 kill 命令有时并不好用。要发送进程信号，你必须是进程的属主或登录为 root 用户。否则会提示"),a("code",[s._v("Operation not permitted")]),s._v("。")]),s._v(" "),a("p",[s._v("TERM 信号告诉进程可能的话就停止运行。不过，如果有不服管教的进程，那它通常会忽略这个请求。"),a("strong",[s._v("如果需要强制终止，可以指定广为人知的-9 参数，即 KILL 信号")]),s._v("。")]),s._v(" "),a("p",[s._v("同时，-s 参数支持指定其他信号（用信号名或信号值）。")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("kill")]),s._v(" -s HUP "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3940")]),s._v("\n")])])]),a("p",[s._v("要检查 kill 命令是否有效，可再运行 ps 或 top 命令，看看问题进程是否已停止。")]),s._v(" "),a("p",[s._v("第二个是 killall 命令，它非常强大，它支持通过进程名而不是 PID 来结束进程。killall 命令也支持通配符，这在系统因负载过大而变得很慢时很有用。")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("killall")]),s._v(" http*\n")])])]),a("p",[s._v("上例中的命令结束了所有以 http 开头的进程，比如 Apache Web 服务器的 httpd 服务。\n以 root 用户身份登录系统时，使用 killall 命令要特别小心，因为很容易就会误用通配符而结束了重要的系统进程。这可能会破坏文件系统。")]),s._v(" "),a("h2",{attrs:{id:"磁盘相关"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#磁盘相关"}},[s._v("#")]),s._v(" 磁盘相关")]),s._v(" "),a("p",[s._v("在 Linux 系统上有几个命令行命令可以用来帮助管理存储媒体。本节将介绍在日常系统管理中经常用到的核心命令。")]),s._v(" "),a("h3",{attrs:{id:"mount-挂载磁盘"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mount-挂载磁盘"}},[s._v("#")]),s._v(" mount 挂载磁盘")]),s._v(" "),a("p",[a("strong",[s._v("Linux 文件系统将所有的磁盘都并入一个虚拟目录下")]),s._v("。在使用新的存储媒体之前，需要把它放到虚拟目录下。这项工作称为==挂载（mounting）==。在今天的图形化桌面环境里，大多数 Linux 发行版都能自动挂载特定类型的可移动存储媒体。可移动存储媒体指的是可从 PC 上轻易移除的媒体，比如 CD-ROM、软盘和 U 盘。如果用的发行版不支持自动挂载和卸载可移动存储媒体，就必须手动完成。本节将介绍一些可以帮你管理可移动存储设备的 Linux 命令行命令。")]),s._v(" "),a("p",[s._v("Linux 上用来挂载媒体的命令叫作 mount。默认情况下，mount 命令会输出当前系统上挂载的设备列表。")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("mount")]),s._v("\n/dev/nvme0n1p1 on / "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("type")]),s._v(" ext4 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("rw,relatime"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n/dev/nvme0n1p2 on /home "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("type")]),s._v(" ext4 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("rw,relatime"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n/dev/nvme0n1p3 on /boot/EFI "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("type")]),s._v(" vfat "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("rw,relatime,fmask"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("0022,dmask"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("0022,codepage"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("437")]),s._v(",iocharset"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("iso8859-1,shortname"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("mixed,utf8,errors"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("remount-ro"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n/dev/sda1 on /run/media/testuser/My Ultra "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("type")]),s._v(" fuseblk "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("rw,nosuid,nodev,relatime,user_id"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(",group_id"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(",default_permissions,allow_other,blksize"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4096")]),s._v(",uhelper"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("udisks2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])])]),a("p",[s._v("mount 命令提供如下四部分信息：")]),s._v(" "),a("ul",[a("li",[s._v("媒体的设备文件名")]),s._v(" "),a("li",[s._v("媒体挂载到虚拟目录的挂载点")]),s._v(" "),a("li",[s._v("文件系统类型")]),s._v(" "),a("li",[s._v("已挂载媒体的访问状态")])]),s._v(" "),a("p",[s._v("上面例子的最后一行输出中，移动硬盘被 KDE 桌面自动挂载到了挂载点/run/media 下。这个移动硬盘本身是 NTFS 格式，但是显示为 fuseblk。fuse 意为 file system in user space，在 archlinux 下，需要使用 ntfs-3g 来识别 NTFS 硬盘。ntfs-3g 并不是内核模块，而是调用 fuse 来挂载的，所以 df -hT 以及 mount 的结果会认为是 fuseblk(blk=block)。")]),s._v(" "),a("p",[s._v("要手动在虚拟目录中挂载设备，需要以 root 用户身份登录，或是以 root 用户身份运行 sudo 命令。下面是手动挂载媒体设备的基本命令：")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("mount")]),s._v(" -t "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("type")]),s._v(" device directory\n")])])]),a("p",[s._v("type 参数指定了磁盘被格式化的文件系统类型。Linux 可以识别非常多的文件系统类型。如果是和 Windows PC 共用这些存储设备，通常得使用下列文件系统类型。")]),s._v(" "),a("ul",[a("li",[s._v("vfat：Windows 长文件系统。缺点是单文件 4GB 的限制。")]),s._v(" "),a("li",[s._v("ntfs：Windows NT、XP、Vista、Win 7 以及 Win10 中广泛使用的高级文件系统。")]),s._v(" "),a("li",[s._v("iso9660：标准 CD-ROM 文件系统。")]),s._v(" "),a("li",[s._v("exFAT:vfat 升级版，突破了 4GB 的限制。")])]),s._v(" "),a("p",[s._v("大多数 U 盘和软盘会被格式化成 vfat/NTFS/exFAT 文件系统。而数据 CD 则必须使用 iso9660 文件系统类型。")]),s._v(" "),a("p",[s._v("后面两个参数定义了该存储设备的设备文件的位置以及挂载点在虚拟目录中的位置。比如说，手动将 U 盘/dev/sdb1 挂载到/media/disk，可用下面的命令：")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("mount")]),s._v(" -t vfat /dev/sdb1 /media/disk\n")])])]),a("p",[s._v("媒体设备挂载到了虚拟目录后，root 用户就有了对该设备的所有访问权限，而其他用户的访问则会被限制。你可以通过目录权限（后文将介绍权限）指定用户对设备的访问权限。")]),s._v(" "),a("p",[s._v("-o 参数允许在挂载文件系统时添加一些以逗号分隔的额外选项。以下为常用的选项。")]),s._v(" "),a("ul",[a("li",[s._v("ro：以只读形式挂载。")]),s._v(" "),a("li",[s._v("rw：以读写形式挂载。")]),s._v(" "),a("li",[s._v("user：允许普通用户挂载文件系统。")]),s._v(" "),a("li",[s._v("check=none：挂载文件系统时不进行完整性校验。")]),s._v(" "),a("li",[s._v("loop：挂载一个文件。")])]),s._v(" "),a("hr"),s._v(" "),a("p",[s._v("从 Linux 系统上移除一个可移动设备时，不能直接从系统上移除，而应该先卸载。Linux 上不能直接弹出已挂载的 CD。如果你在从光驱中移除 CD 时遇到麻烦，通常是因为该 CD 还挂载在虚拟目录里。先卸载它，然后再去尝试弹出。")]),s._v(" "),a("p",[s._v("卸载设备的命令是 umount（是的，你没看错，命令名中并没有字母 n，这一点有时候很让人困惑）。umount 命令的格式非常简单：")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("umount")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("directory "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" device "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])])]),a("p",[s._v("umount 命令支持通过设备文件或者是挂载点来指定要卸载的设备。如果有任何程序正在使用设备上的文件，系统就不会允许你卸载它：")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" umount: /home/rich/mnt\numount: /home/rich/mnt: device is busy\n$ "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("cd")]),s._v(" /home/rich\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("umount")]),s._v(" /home/rich/mnt\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v(" -l mnt\ntotal "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n")])])]),a("p",[s._v("上例中，命令行提示符仍然在挂载设备的文件系统目录中，所以 umount 命令无法卸载该镜像文件。一旦命令提示符移出该镜像文件的文件系统，umount 命令就能卸载该镜像文件。")]),s._v(" "),a("p",[s._v("如果在卸载设备时，系统提示设备繁忙，无法卸载设备，通常是有进程还在访问该设备或使用该设备上的文件。这时可用 lsof 命令获得使用它的进程信息，然后在应用中停止使用该设备或停止该进程。lsof 命令的用法很简单：lsof /path/to/device/node，或者 lsof /path/to/mount/point")]),s._v(" "),a("h3",{attrs:{id:"df-查看磁盘空间"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#df-查看磁盘空间"}},[s._v("#")]),s._v(" df 查看磁盘空间")]),s._v(" "),a("p",[s._v("有时你需要知道在某个设备上还有多少磁盘空间。df 命令可以让你很方便地查看所有已挂载磁盘的使用情况")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("df")]),s._v("\nFilesystem           1K-blocks      Used Available Use% Mounted on\n/dev/sda2             "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("18251068")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7703964")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9605024")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("45")]),s._v("% /\n/dev/sda1               "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("101086")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("18680")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("77187")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("% /boot\ntmpfs                   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("119536")]),s._v("         "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("119536")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("% /dev/shm\n/dev/sdb1               "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("127462")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("113892")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("13570")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("90")]),s._v("% /media/disk\n")])])]),a("p",[a("strong",[s._v("df 命令会显示每个有数据的已挂载文件系统")]),s._v("。如你在前例中看到的，有些已挂载设备仅限系统内部使用。可以注意到，默认大小均为 1024 字节，不利于直观查看，可附加==-h 参数进行更直观的查看。它会把输出中的磁盘空间按照用户易读的形式显示，通常用 M 来替代兆字节，用 G 替代吉字节==。")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("df")]),s._v(" -h\nFilesystem            Size  Used Avail Use% Mounted on\n/dev/sdb2              18G  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),s._v(".4G  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9")]),s._v(".2G  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("45")]),s._v("% /\n/dev/sda1              99M   19M   76M  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("% /boot\ntmpfs                 117M     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  117M   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("% /dev/shm\n/dev/sdb1             125M  112M   14M  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("90")]),s._v("% /media/disk\n")])])]),a("h3",{attrs:{id:"du-查看目录空间"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#du-查看目录空间"}},[s._v("#")]),s._v(" du 查看目录空间")]),s._v(" "),a("p",[s._v("通过 df 命令很容易发现哪个磁盘的存储空间快没了。系统管理员面临的下一个问题是，发生这种情况时要怎么办。另一个有用的命令是 du 命令。du 命令可以显示某个特定目录（默认情况下是当前目录）的磁盘使用情况。这一方法可用来快速判断系统上某个目录下是不是有超大文件。默认情况下，du 命令会显示当前目录下所有的文件、目录和子目录的磁盘使用情况，它会以磁盘块为单位来表明每个文件或目录占用了多大存储空间。对标准大小的目录来说，这个输出会是一个比较长的列表。")]),s._v(" "),a("p",[s._v("每行输出左边的数值是每个文件或目录占用的磁盘块数。注意，这个列表是从目录层级的最底部开始，然后按文件、子目录、目录逐级向上。\n这么用 du 命令（不加参数，用默认参数）作用并不大。我们更想知道每个文件和目录占用了多大的磁盘空间，但如果还得逐页查找的话就没什么意义了。下面是能让 du 命令用起来更方便的几个命令行参数。")]),s._v(" "),a("ul",[a("li",[s._v("-s：同时查询多目录时，依次只显示每个输出参数(目录)的总大小。")]),s._v(" "),a("li",[s._v("-c：同时查询多目录时，显示所有已列出文件总的大小。")]),s._v(" "),a("li",[s._v("-h：按用户易读的格式输出大小，即用 K 替代千字节，用 M 替代兆字节，用 G 替代吉字节。")])]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("du")]),s._v(" -sh ./Documents/ ./Desktop/\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(".4G    ./Documents/\n58G     ./Desktop/\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("du")]),s._v(" -shc ./Documents/ ./Desktop/\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(".4G    ./Documents/\n58G     ./Desktop/\n62G     总用量\n")])])]),a("h2",{attrs:{id:"文件数据相关"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#文件数据相关"}},[s._v("#")]),s._v(" 文件数据相关")]),s._v(" "),a("h3",{attrs:{id:"sort-排序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sort-排序"}},[s._v("#")]),s._v(" sort 排序")]),s._v(" "),a("p",[s._v("处理大量数据时的一个常用命令是 sort 命令。顾名思义，sort 命令是对数据进行排序的。默认情况下，sort 命令按照会话指定的默认语言的排序规则对文本文件中的数据行排序。")]),s._v(" "),a("p",[s._v("对数字排序时，如果你本期望这些数字能按值排序，就要失望了。默认情况下，"),a("strong",[s._v("sort 命令会把数字当做字符来执行标准的字符排序，产生的输出可能根本就不是你要的。解决这个问题可用-n 参数，它会告诉 sort 命令把数字识别成数字而不是字符，并且按值排序")]),s._v("。")]),s._v(" "),a("p",[s._v("另一个常用的参数是-M，按月排序。Linux 的日志文件经常会在每行的起始位置有一个时间戳，用来表明事件是什么时候发生的，下面是一个例子。")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("Sep "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("13")]),s._v(" 07:10:09 testbox smartd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2718")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(": Device: /dev/sda, opened\n")])])]),a("p",[s._v("如果将含有时间戳日期的文件按默认的排序方法来排序，并不会得到想要的结果。如果用-M 参数，sort 命令就能识别三字符的月份名，并相应地排序。")]),s._v(" "),a("p",[s._v("-k 和-t 参数在对按字段分隔的数据进行排序时非常有用，例如/etc/passwd 文件。可以用-t 参数来指定字段分隔符，然后用-k 参数来指定排序的字段。举个例子，对密码文件/etc/passwd 根据用户 ID 进行数值排序，可以这么做：")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sort")]),s._v(" -t "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("':'")]),s._v(" -k "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" -n /etc/passwd\nroot:x:0:0::/root:/bin/bash\nbin:x:1:1::/:/usr/bin/nologin\ndaemon:x:2:2::/:/usr/bin/nologin\nmail:x:8:12::/var/spool/mail:/usr/bin/nologin\nftp:x:14:11::/srv/ftp:/usr/bin/nologin\nhttp:x:33:33::/srv/http:/usr/bin/nologin\nuuidd:x:68:68::/:/usr/bin/nologin\n")])])]),a("p",[s._v("现在数据已经按第三个字段——用户 ID 的数值排序。")]),s._v(" "),a("p",[s._v("最后给出一个综合的例子：")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("du")]),s._v(" -s * "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sort")]),s._v(" -nr\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4649672")]),s._v(" Android\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2726928")]),s._v(" Desktop\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2224812")]),s._v(" Documents\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1139980")]),s._v(" Games\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("47172")]),s._v("   Downloads\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("29072")]),s._v("   Pictures\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("560")]),s._v("     ThunderNetwork\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),s._v("       Music\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v("       下载\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v("       Videos\n")])])]),a("p",[s._v("注意，-r 参数将结果按降序输出，这样就更容易看到目录下的哪些文件占用空间最多。本例中用到的管道命令（|）将 du 命令的输出重定向到 sort 命令。我们将在本书后面进一步讨论。")]),s._v(" "),a("h3",{attrs:{id:"grep-搜索"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#grep-搜索"}},[s._v("#")]),s._v(" grep 搜索")]),s._v(" "),a("p",[s._v("你会经常需要在大文件中找一行数据，而这行数据又埋藏在文件的中间。这时并不需要手动翻看整个文件，用 grep 命令来帮助查找就行了。grep 命令的命令行格式如下：")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("options"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" pattern "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("file"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])])]),a("p",[a("strong",[s._v("==grep 命令会在输入或指定的文件中查找包含匹配指定模式的字符的行==")]),s._v("。grep 的输出就是包含了匹配模式的行。")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" three file1\nthree\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" t file1\ntwo\nthree\n")])])]),a("p",[s._v("第一个例子在文件 file1 中搜索能匹配模式 three 的文本。grep 命令输出了匹配了该模式的行。第二个例子在文件 file1 中搜索能匹配模式 t 的文本。这个例子里，file1 中有两行匹配了指定的模式，两行都输出了。由于 grep 命令非常流行，它经历了大量的更新。有很多功能被加进了 grep 命令。如果查看一下它的手册页面，你会发现它是多么的无所不能。")]),s._v(" "),a("p",[s._v("如果要进行反向搜索（输出不匹配该模式的行），可加-v 参数。")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" -v t file1\none\nfour\nfive\n")])])]),a("p",[s._v("如果要显示匹配模式的行所在的行号，可加-n 参数")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" -n t file1\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(":two\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(":three\n")])])]),a("p",[s._v("如果只要知道有多少行含有匹配的模式，可用-c 参数。")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" -c t file1\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("\n")])])]),a("p",[s._v("如果要指定多个匹配模式，可用-e 参数来指定每个模式。这个例子输出了含有字符 t 或字符 f 的所有行。")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" -e t -e f file1\ntwo\nthree\nfour\nfive\n")])])]),a("p",[s._v("默认情况下，grep 命令用基本的 Unix 风格正则表达式来匹配模式。Unix 风格正则表达式采用特殊字符来定义怎样查找匹配的模式。\n以下是在 grep 搜索中使用正则表达式的简单例子。")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("tf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" file1\ntwo\nthree\nfour\nfive\n")])])]),a("p",[s._v("正则表达式中的方括号表明 grep 应该搜索包含 t 或者 f 字符的匹配。如果不用正则表达式，grep 就会搜索匹配字符串 tf 的文本。")]),s._v(" "),a("p",[s._v("egrep 命令是 grep 的一个衍生，支持 POSIX 扩展正则表达式。POSIX 扩展正则表达式含有更多的可以用来指定匹配模式的字符（后文会讲）。fgrep 则是另外一个版本，支持将匹配模式指定为用换行符分隔的一列固定长度的字符串。这样就可以把这列字符串放到一个文件中，然后在 fgrep 命令中用其在一个大型文件中搜索字符串了。egrep 与 grep -E 相同。 fgrep 与 grep -F 相同，所以掌握好 grep 就好。")]),s._v(" "),a("h3",{attrs:{id:"tar-压缩与归档"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tar-压缩与归档"}},[s._v("#")]),s._v(" tar 压缩与归档")]),s._v(" "),a("p",[s._v("gzip 是非常流行的压缩工具软件包，使用方式也很简单，这个软件包含有下面的工具。")]),s._v(" "),a("ul",[a("li",[s._v("gzip：用来压缩文件。")]),s._v(" "),a("li",[s._v("gzcat：用来查看压缩过的文本文件的内容。")]),s._v(" "),a("li",[s._v("gunzip：用来解压文件")])]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("gzip")]),s._v(" myprog "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#压缩文件")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v(" -l my*\n-rwxrwxr-x "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" rich rich "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2197")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2007")]),s._v("-09-13 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("11")]),s._v(":29 myprog.gz\n")])])]),a("p",[s._v("gzip 命令会压缩你在命令行指定的文件。也可以在命令行指定多个文件名甚至用通配符来一次性批量压缩文件。")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("gzip")]),s._v(" my*\n")])])]),a("p",[s._v("虽然 gzip 命令能够很好地将数据压缩和归档进单个文件，但它不是 Unix 和 Linux 中的标准归档工具。目前，Unix 和 Linux 上最广泛使用的归档工具是 tar 命令。\ntar 命令最开始是用来将文件写到磁带设备上归档的，然而它也能把输出写到文件里，这种用法在 Linux 上已经普遍用来归档数据了。关于 tar 的用法由于历史原因也有三种使用方式，较为复杂，记住常用方式即可。此时使用"),a("code",[s._v("tldr tar")]),s._v("命令，即可很方便的查看常用用法。")]),s._v(" "),a("h2",{attrs:{id:"网络相关"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#网络相关"}},[s._v("#")]),s._v(" 网络相关")]),s._v(" "),a("h3",{attrs:{id:"lsof-查看java端口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lsof-查看java端口"}},[s._v("#")]),s._v(" lsof 查看java端口")]),s._v(" "),a("p",[s._v("lsof(list open files)是一个列出当前系统打开文件的工具。")]),s._v(" "),a("p",[s._v("lsof 查看端口占用语法格式：")]),s._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("lsof")]),s._v(" -i:端口号\n")])])]),a("h3",{attrs:{id:"netstat-查看开放的tcp端口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#netstat-查看开放的tcp端口"}},[s._v("#")]),s._v(" netstat 查看开放的tcp端口")]),s._v(" "),a("p",[s._v("netstat -tunlp 用于显示 tcp，udp 的端口和进程等相关情况。")]),s._v(" "),a("p",[s._v("netstat 查看端口占用语法格式：")]),s._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("netstat")]),s._v(" -tunlp "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" 端口号\n")])])]),a("ul",[a("li",[s._v("-t (tcp) 仅显示tcp相关选项")]),s._v(" "),a("li",[s._v("-u (udp)仅显示udp相关选项")]),s._v(" "),a("li",[s._v("-n 拒绝显示别名，能显示数字的全部转化为数字")]),s._v(" "),a("li",[s._v("-l 仅列出在Listen(监听)的服务状态")]),s._v(" "),a("li",[s._v("-p 显示建立相关链接的程序名")])])])}),[],!1,null,null,null);t.default=e.exports}}]);