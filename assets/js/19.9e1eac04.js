(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{575:function(a,s,t){"use strict";t.r(s);var n=t(14),e=Object(n.a)({},(function(){var a=this,s=a.$createElement,t=a._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"类文件结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类文件结构"}},[a._v("#")]),a._v(" 类文件结构")]),a._v(" "),t("h2",{attrs:{id:"无关性-平台无关性-语言无关性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#无关性-平台无关性-语言无关性"}},[a._v("#")]),a._v(" 无关性-平台无关性+语言无关性")]),a._v(" "),t("p",[a._v("各种不同平台的Java虚拟机，以及所有平台都统一支持的程序存储格式——字节码（Byte Code）是构成"),t("strong",[a._v("平台无关性")]),a._v("的基石，但本节标题中笔者刻意省略了“平台”二字，那是因为笔者注意到虚拟机的另外一种中立特性——"),t("strong",[a._v("语言无关性")]),a._v("正在越来越被开发者所重视。直到今天，或许还有相当一部分程序员认为Java虚拟机执行Java程序是一件理所当然和天经地义的事情。但在Java技术发展之初，设计者们就曾经"),t("strong",[a._v("考虑过并实现了让其他语言运行在Java虚拟机之上的可能性。")])]),a._v(" "),t("p",[a._v("时至今日，商业企业和开源机构已经在Java语言之外发展出一大批运行在Java虚拟机之上的语言，如Kotlin、Clojure、Groovy、JRuby、JPython、Scala等。")]),a._v(" "),t("p",[a._v("Java虚拟机不与包括Java语言在内的任何程序语言绑定，它只与“Class文件”这种特定的二进制文件格式所关联，Class文件中包含了Java虚拟机指令集、符号表以及若干其他辅助信息。")]),a._v(" "),t("p",[a._v("Java语言中的各种语法、关键字、常量变量和运算符号的语义最终都会由多条字节码指令组合来表达，这决定了字节码指令所能提供的语言描述能力必须比Java语言本身更加强大才行。")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://walegarrett-image-1304556108.cos.ap-chengdu.myqcloud.com/markdown_img/202203231605629.png",alt:"img"}})]),a._v(" "),t("h2",{attrs:{id:"class类文件结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#class类文件结构"}},[a._v("#")]),a._v(" Class类文件结构")]),a._v(" "),t("p",[a._v("Java技术能够一直保持着非常良好的向后兼容性，Class文件结构的稳定功不可没。")]),a._v(" "),t("p",[a._v("任何一个Class文件都对应着唯一的一个类或接口的定义信息[1]，但是反过来说，类或接口并不一定都得定义在文件里（譬如类或接口也可以动态生成，直接送入类加载器中）。")]),a._v(" "),t("p",[a._v("Class文件是一组以"),t("strong",[a._v("8个字节为基础单位")]),a._v("的二进制流，各个数据项目严格按照顺序紧凑地排列在文件之中，中间没有添加任何分隔符，这使得整个Class文件中存储的内容几乎全部是程序运行的必要数据，没有空隙存在。当遇到需要占用8个字节以上空间的数据项时，则会按照"),t("strong",[a._v("高位在前")]),a._v("[2]的方式分割成若干个8个字节进行存储。")]),a._v(" "),t("p",[a._v("根据《Java虚拟机规范》的规定，Class文件格式采用一种类似于C语言结构体的伪结构来存储数据，这种伪结构中只有两种数据类型：“无符号数”和“表”。")]),a._v(" "),t("ol",[t("li",[t("p",[a._v("无符号数属于基本的数据类型，以u1、u2、u4、u8来分别代表1个字节、2个字节、4个字节和8个字节的无符号数，无符号数可以用来描述数字、索引引用、数量值或者按照UTF-8编码构成字符串值。")])]),a._v(" "),t("li",[t("p",[a._v("表是由多个无符号数或者其他表作为数据项构成的复合数据类型，为了便于区分，"),t("strong",[a._v("所有表的命名都习惯性地以“_info”结尾")]),a._v("。表用于描述有层次关系的复合结构的数据，整个Class文件本质上也可以视作是一张表。")])])]),a._v(" "),t("p",[a._v("无论是无符号数还是表，当需要描述同一类型但数量不定的多个数据时，经常会使用一个前置的容量计数器加若干个连续的数据项的形式，这时候称这一系列连续的某一类型的数据为某一类型的“集合”。")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://walegarrett-image-1304556108.cos.ap-chengdu.myqcloud.com/markdown_img/202203231605656.png",alt:"img"}})]),a._v(" "),t("p",[a._v("Class的结构不像XML等描述语言，由于"),t("strong",[a._v("它没有任何分隔符号")]),a._v("，所以在表6-1中的数据项，无论是顺序还是数量，甚至于数据存储的字节序（Byte Ordering，Class文件中字节序为Big-Endian）这样的细节，都是被严格限定的，"),t("strong",[a._v("哪个字节代表什么含义，长度是多少，先后顺序如何，全部都不允许改变。")])]),a._v(" "),t("h3",{attrs:{id:"magic-number与class文件的版本"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#magic-number与class文件的版本"}},[a._v("#")]),a._v(" magic Number与Class文件的版本")]),a._v(" "),t("p",[a._v("每个Class文件的头"),t("strong",[a._v("4个字节")]),a._v("被称为魔数（Magic Number），它的**唯一作用是确定这个文件是否为一个能被虚拟机接受的Class文件。**不仅是Class文件，很多文件格式标准中都有使用魔数来进行身份识别的习惯，譬如图片格式。")]),a._v(" "),t("p",[a._v("使用魔数而不是扩展名来进行识别主要是基于安全考虑，因为文件扩展名可以随意改动。")]),a._v(" "),t("p",[a._v("紧接着魔数的"),t("strong",[a._v("4个字节")]),a._v("存储的是Class文件的版本号：第5和第6个字节是次版本号（Minor Version），第7和第8个字节是主版本号（Major Version）。Java的版本号是"),t("strong",[a._v("从45开始")]),a._v("的，JDK 1.1之后的每个JDK大版本发布主版本号向上加1（JDK 1.0～1.1使用了45.0～45.3的版本号），高版本的JDK能向下兼容以前版本的Class文件，但不能运行以后版本的Class文件。")]),a._v(" "),t("h3",{attrs:{id:"常量池"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#常量池"}},[a._v("#")]),a._v(" 常量池")]),a._v(" "),t("p",[a._v("紧接着主、次版本号之后的是常量池入口，常量池可以比喻为Class文件里的资源仓库，它是Class文件结构中与其他项目关联最多的数据，通常也是占用Class文件空间最大的数据项目之一，另外，它还是在Class文件中第一个出现的表类型数据项目。")]),a._v(" "),t("p",[a._v("由于常量池中常量的数量是不固定的，所以在常量池的入口需要放置一项u2类型的数据，代表常量池容量计数值（constant_pool_count）。")]),a._v(" "),t("p",[a._v("常量池中主要存放两大类常量："),t("strong",[a._v("字面量（Literal）和符号引用（Symbolic References）")]),a._v("。字面量比较接近于Java语言层面的常量概念，如文本字符串、被声明为final的常量值等。"),t("strong",[a._v("而符号引用则属于编译原理方面的概念")]),a._v("，主要包括下面几类常量：")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("被模块导出或者开放的包（Package）")])]),a._v(" "),t("li",[t("p",[a._v("类和接口的"),t("strong",[a._v("全限定名")]),a._v("（Fully Qualified Name）")])]),a._v(" "),t("li",[t("p",[a._v("字段的名称和描述符（Descriptor）")])]),a._v(" "),t("li",[t("p",[a._v("方法的名称和描述符")])]),a._v(" "),t("li",[t("p",[a._v("方法句柄和方法类型（Method Handle、Method Type、Invoke Dynamic）")])]),a._v(" "),t("li",[t("p",[a._v("动态调用点和动态常量（Dynamically-Computed Call Site、Dynamically-Computed Constant）")])])]),a._v(" "),t("p",[a._v("Java代码在进行Javac编译的时候，并不像C和C++那样有“连接”这一步骤，"),t("strong",[a._v("而是在虚拟机加载Class文件的时候进行动态连接")]),a._v("（具体见第7章）。也就是说，"),t("strong",[a._v("在Class文件中不会保存各个方法、字段最终在内存中的布局信息")]),a._v("，这些字段、方法的符号引用不经过虚拟机在运行期转换的话是无法得到真正的内存入口地址，也就无法直接被虚拟机使用的。当虚拟机做类加载时，将会从常量池获得对应的符号引用，再在类创建时或运行时解析、翻译到具体的内存地址之中。")]),a._v(" "),t("p",[a._v("常量池中每一项常量都是一个表，截至JDK13，常量表中分别有17种不同类型的常量。")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://walegarrett-image-1304556108.cos.ap-chengdu.myqcloud.com/markdown_img/202203282234118.png",alt:"img"}})]),a._v(" "),t("p",[a._v("使用javap命令分析Class文件字节码")]),a._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("E")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v("\\IDEA\\"),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("IdeaProjects")]),a._v("\\contest\\out\\production\\jvm"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("javap "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("verbose "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("TestClass")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Classfile")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("E")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("IDEA"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("IdeaProjects")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("contest"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("out"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("production"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("jvm"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("TestClass")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Last")]),a._v(" modified "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2021")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("11")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("20")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" size "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("353")]),a._v(" bytes\n  MD5 checksum "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("5908224")]),a._v("c7206c6d1fdb54ded6270f79d\n  "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Compiled")]),a._v(" from "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"TestClass.java"')]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("TestClass")]),a._v("\n  minor version"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v("\n  major version"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("52")]),a._v("\n  flags"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" ACC_PUBLIC"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" ACC_SUPER\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Constant")]),a._v(" pool"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v("\n   #"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Methodref")]),a._v("          #"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("4.")]),a._v("#"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("18")]),a._v("         "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v('// java/lang/Object."\\<init>":()V')]),a._v("\n   #"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Fieldref")]),a._v("           #"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("3.")]),a._v("#"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("19")]),a._v("         "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// TestClass.m:I")]),a._v("\n   #"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Class")]),a._v("              #"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("20")]),a._v("            "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// TestClass")]),a._v("\n   #"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("4")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Class")]),a._v("              #"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("21")]),a._v("            "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// java/lang/Object")]),a._v("\n   #"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Utf8")]),a._v("               m\n   #"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("6")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Utf8")]),a._v("               "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("I")]),a._v("\n   #"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("7")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Utf8")]),a._v("               \\"),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("init"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n   #"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("8")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Utf8")]),a._v("               "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("V")]),a._v("\n   #"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("9")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Utf8")]),a._v("               "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Code")]),a._v("\n  #"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("10")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Utf8")]),a._v("               "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("LineNumberTable")]),a._v("\n  #"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("11")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Utf8")]),a._v("               "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("LocalVariableTable")]),a._v("\n  #"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("12")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Utf8")]),a._v("               "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("this")]),a._v("\n  #"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("13")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Utf8")]),a._v("               "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("LTestClass")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n  #"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("14")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Utf8")]),a._v("               inc\n  #"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("15")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Utf8")]),a._v("               "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("I")]),a._v("\n  #"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("16")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Utf8")]),a._v("               "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("SourceFile")]),a._v("\n  #"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("17")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Utf8")]),a._v("               "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("TestClass")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("java\n  #"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("18")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("NameAndType")]),a._v("        #"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("7")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v("#"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("8")]),a._v("          "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v('// "\\<init>":()V')]),a._v("\n  #"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("19")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("NameAndType")]),a._v("        #"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v("#"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("6")]),a._v("          "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// m:I")]),a._v("\n  #"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("20")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Utf8")]),a._v("               "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("TestClass")]),a._v("\n  #"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("21")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Utf8")]),a._v("               java"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("lang"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Object")]),a._v("\n")])])]),t("p",[a._v("**注：**以上常量池字节码中，出现了“I”“V”“<init>”“LineNumberTable”“LocalVariableTable”等在源代码不曾出现的常量，"),t("strong",[a._v("它们都是编译器自动生成的")]),a._v("，会被后面即将讲到的字段表（field_info）、方法表（method_info）、属性表（attribute_info）所引用，它们将会被用来描述一些不方便使用“固定字节”进行表达的内容，譬如描述方法的返回值是什么，有几个参数，每个参数的类型是什么。因为Java中的“类”是无穷无尽的，无法通过简单的无符号数来描述一个方法用到了什么类，因此在描述方法的这些信息时，需要引用常量表中的符号引用进行表达。")]),a._v(" "),t("h3",{attrs:{id:"访问标志"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#访问标志"}},[a._v("#")]),a._v(" 访问标志")]),a._v(" "),t("p",[a._v("在常量池结束之后，紧接着的2个字节代表访问标志（access_flags），这个标志用于识别一些类或者接口层次的访问信息，包括：这个Class是类还是接口；是否定义为public类型；是否定义为abstract类型；如果是类的话，是否被声明为final；等等。")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://walegarrett-image-1304556108.cos.ap-chengdu.myqcloud.com/markdown_img/202203231605564.png",alt:"img"}})]),a._v(" "),t("h3",{attrs:{id:"类索引、父类索引与接口索引集合"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类索引、父类索引与接口索引集合"}},[a._v("#")]),a._v(" 类索引、父类索引与接口索引集合")]),a._v(" "),t("p",[a._v("类索引（this_class）和父类索引（super_class）都是一个u2类型的数据，而接口索引集合（interfaces）是一组u2类型的数据的集合，"),t("strong",[a._v("Class文件中由这三项数据来确定该类型的继承关系")]),a._v("。类索引用于确定这个类的全限定名，父类索引用于确定这个类的父类的全限定名。")]),a._v(" "),t("p",[a._v("接口索引集合就用来描述这个类实现了哪些接口，这些被实现的接口将按implements关键字（如果这个Class文件表示的是一个接口，则应当是extends关键字）后的接口顺序从左到右排列在接口索引集合中。")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://walegarrett-image-1304556108.cos.ap-chengdu.myqcloud.com/markdown_img/202203231605809.png",alt:"img"}})]),a._v(" "),t("h3",{attrs:{id:"字段表集合"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#字段表集合"}},[a._v("#")]),a._v(" 字段表集合")]),a._v(" "),t("p",[a._v("字段表（field_info）用于描述接口或者类中声明的变量。"),t("strong",[a._v("Java语言中的“字段”（Field）包括类级变量以及实例级变量，但不包括在方法内部声明的局部变量。")])]),a._v(" "),t("p",[a._v("字段可以包括的修饰符有字段的作用域（public、private、protected修饰符）、是实例变量还是类变量（static修饰符）、可变性（final）、并发可见性（volatile修饰符，是否强制从主内存读写）、可否被序列化（transient修饰符）、字段数据类型（基本类型、对象、数组）、字段名称。上述这些信息中，各个修饰符都是布尔值，要么有某个修饰符，要么没有，很适合使用标志位来表示。"),t("strong",[a._v("而字段叫做什么名字、字段被定义为什么数据类型，这些都是无法固定的，只能引用常量池中的常量来描述。")])]),a._v(" "),t("p",[a._v("“简单名称”“描述符”以及前面出现过多次的“全限定名”这三种特殊字符串的概念。")]),a._v(" "),t("ul",[t("li",[t("p",[t("strong",[a._v("全限定名和简单名称")]),a._v("很好理解，“org/fenixsoft/clazz/TestClass”是这个类的全限定名，仅仅是把类全名中的“.”替换成了“/”而已，为了使连续的多个全限定名之间不产生混淆，在使用时最后一般会加入一个“；”号表示全限定名结束。"),t("strong",[a._v("简单名称")]),a._v("则就是指没有类型和参数修饰的方法或者字段名称，这个类中的inc()方法和m字段的简单名称分别就是“inc”和“m”。")])]),a._v(" "),t("li",[t("p",[a._v("相比于全限定名和简单名称，方法和字段的描述符就要复杂一些。描述符的作用是用来描述字段的数据类型、方法的参数列表（包括数量、类型以及顺序）和返回值。根据描述符规则，基本数据类型（byte、char、double、float、int、long、short、boolean）以及代表无返回值的void类型都用一个大写字符来表示，而对象类型则用字符L加对象的全限定名来表示。")])])]),a._v(" "),t("p",[t("strong",[a._v("字段表集合中不会列出从父类或者父接口中继承而来的字段，但有可能出现原本Java代码之中不存在的字段，譬如在内部类中为了保持对外部类的访问性，编译器就会自动添加指向外部类实例的字段。")])]),a._v(" "),t("p",[a._v("另外，在Java语言中字段是无法重载的，"),t("strong",[a._v("两个字段的数据类型、修饰符不管是否相同，都必须使用不一样的名称")]),a._v("，但是对于Class文件格式来讲，只要两个字段的描述符不是完全相同，那字段重名就是合法的。")]),a._v(" "),t("h3",{attrs:{id:"方法表集合"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#方法表集合"}},[a._v("#")]),a._v(" 方法表集合")]),a._v(" "),t("p",[a._v("Class文件存储格式中对方法的描述与对字段的描述采用了几乎完全一致的方式，方法表的结构如同字段表一样，依次包括访问标志（access_flags）、名称索引（name_index）、描述符索引（descriptor_index）、属性表集合（attributes）几项。")]),a._v(" "),t("p",[a._v("与字段表集合相对应地，如果父类方法在子类中没有被重写（Override），"),t("strong",[a._v("方法表集合中就不会出现来自父类的方法信息。但同样地，有可能会出现由编译器自动添加的方法，最常见的便是类构造器“<clinit>()”方法和实例构造器“<init>()”方法。")])]),a._v(" "),t("p",[a._v("在Java语言中，要重载（Overload）一个方法，除了要与原方法具有相同的简单名称之外，还要求必须拥有一个与原方法不同的特征签名[2]。特征签名是指一个方法中各个参数在常量池中的字段符号引用的集合，也正是因为返回值不会包含在特征签名之中，所以Java语言里面是无法仅仅依靠返回值的不同来对一个已有方法进行重载的。但是在Class文件格式之中，特征签名的范围明显要更大一些，只要描述符不是完全一致的两个方法就可以共存。也就是说，如果两个方法有相同的名称和特征签名，但返回值不同，那么也是可以合法共存于同一个Class文件中的。}")]),a._v(" "),t("h3",{attrs:{id:"属性表集合"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#属性表集合"}},[a._v("#")]),a._v(" 属性表集合")]),a._v(" "),t("p",[a._v("属性表（attribute_info）在前面的讲解之中已经出现过数次，Class文件、字段表、方法表都可以携带自己的属性表集合，以描述某些场景专有的信息。")]),a._v(" "),t("h1",{attrs:{id:"虚拟机类加载机制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#虚拟机类加载机制"}},[a._v("#")]),a._v(" 虚拟机类加载机制")]),a._v(" "),t("p",[a._v("在Class文件中描述的各类信息，最终都需要加载到虚拟机中之后才能被运行和使用。")]),a._v(" "),t("p",[t("strong",[a._v("Java虚拟机把描述类的数据从Class文件加载到内存，并对数据进行校验、转换解析和初始化，最终形成可以被虚拟机直接使用的Java类型，这个过程被称作虚拟机的类加载机制。")])]),a._v(" "),t("p",[a._v("与那些在编译时需要进行连接的语言（C++）不同，在Java语言里面，"),t("strong",[a._v("类型的加载、连接和初始化过程都是在程序运行期间完成的")]),a._v("，这种策略让Java语言进行提前编译会面临额外的困难，也会让类加载时稍微增加一些性能开销，但是却为Java应用提供了极高的扩展性和灵活性，Java天生可以动态扩展的语言特性就是依赖运行期动态加载和动态连接这个特点实现的。")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://walegarrett-image-1304556108.cos.ap-chengdu.myqcloud.com/markdown_img/202203231605444.png",alt:"img"}})]),a._v(" "),t("h2",{attrs:{id:"类加载的时机"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类加载的时机"}},[a._v("#")]),a._v(" 类加载的时机")]),a._v(" "),t("p",[t("strong",[a._v("加载、验证、准备、初始化和卸载这五个阶段的顺序是确定的")]),a._v("，类型的加载过程必须按照这种顺序按部就班地开始，"),t("strong",[a._v("而****解析阶段则不一定：它在某些情况下可以在初始化阶段之后再开始，这是为了支持Java语言的运行时绑定特性（也称为动态绑定或晚期绑定）")]),a._v("。")]),a._v(" "),t("p",[a._v("关于在什么情况下需要开始类加载过程的第一个阶段“加载”，《Java虚拟机规范》中并没有进行强制约束，这点可以交给虚拟机的具体实现来自由把握。")]),a._v(" "),t("p",[a._v("但是对于初始化阶段，《Java虚拟机规范》则是严格规定了有且只有六种情况必须立即对类进行“初始化”（而加载、验证、准备自然需要在此之前开始）：")]),a._v(" "),t("ol",[t("li",[t("p",[a._v("遇到new、getstatic、putstatic或invokestatic这四条字节码指令时，如果类型没有进行过初始化，则需要先触发其初始化阶段。能够生成这四条指令的典型Java代码场景有：")]),a._v(" "),t("ol",[t("li",[t("p",[a._v("使用new关键字实例化对象的时候。")])]),a._v(" "),t("li",[t("p",[a._v("读取或设置一个类型的静态字段（被final修饰、已在编译期把结果放入常量池的静态字段除外）的时候。")])]),a._v(" "),t("li",[t("p",[a._v("调用一个类型的静态方法的时候。")])])])]),a._v(" "),t("li",[t("p",[a._v("使用java.lang.reflect包的方法对类型进行"),t("strong",[a._v("反射调用")]),a._v("的时候，如果类型没有进行过初始化，则需要先触发其初始化。")])]),a._v(" "),t("li",[t("p",[a._v("当初始化类的时候，如果发现其父类还没有进行过初始化，则需要先触发其"),t("strong",[a._v("父类的初始化")]),a._v("。")])]),a._v(" "),t("li",[t("p",[a._v("当虚拟机启动时，用户需要指定一个要执行的"),t("strong",[a._v("主类")]),a._v("（包含main()方法的那个类），虚拟机会先初始化这个主类。")])]),a._v(" "),t("li",[t("p",[a._v("当使用JDK 7新加入的动态语言支持时，如果一个java.lang.invoke.MethodHandle实例最后的解析结果为REF_getStatic、REF_putStatic、REF_invokeStatic、REF_newInvokeSpecial四种类型的方法句柄，并且这个方法句柄对应的类没有进行过初始化，则需要先触发其初始化。")])]),a._v(" "),t("li",[t("p",[a._v("当一个接口中定义了JDK 8新加入的"),t("strong",[a._v("默认方法")]),a._v("（被default关键字修饰的接口方法）时，如果有这个接口的实现类发生了初始化，那该接口要在其之前被初始化。")])])]),a._v(" "),t("p",[a._v("对于这六种会触发类型进行初始化的场景，《Java虚拟机规范》中使用了一个非常强烈的限定语——“有且只有”，这六种场景中的行为称为对一个类型进行"),t("strong",[a._v("主动引用")]),a._v("。除此之外，所有引用类型的方式都"),t("strong",[a._v("不会触发初始化")]),a._v("，称为被动引用。")]),a._v(" "),t("ol",[t("li",[t("p",[a._v("**通过子类引用父类的静态字段，不会导致子类初始化。**对于静态字段，只有直接定义这个字段的类才会被初始化，因此通过其子类来引用父类中定义的静态字段，只会触发父类的初始化而不会触发子类的初始化。至于是否要触发子类的加载和验证阶段，在《Java虚拟机规范》中并未明确规定，所以这点取决于虚拟机的具体实现。")])]),a._v(" "),t("li",[t("p",[t("strong",[a._v("通过数组定义来引用类，不会触发此类的初始化。")]),t("code",[a._v("SuperClass[] sca = new SuperClass[10];")])])]),a._v(" "),t("li",[t("p",[a._v("常量在编译阶段会存入调用类的常量池中，本质上没有直接引用到定义常量的类，因此不会触发定义常量的类的初始化。"),t("code",[a._v('public static final String HELLOWORLD = "hello world";')]),a._v("虽然在Java源码中确实引用了ConstClass类的常量HELLOWORLD，但其实在编译阶段通过常量传播优化，已经将此常量的值“helloworld”直接存储在NotInitialization类的常量池中，以后NotInitialization对常量ConstClass.HELLOWORLD的引用，实际都被转化为NotInitialization类对自身常量池的引用了。也就是说，实际上NotInitialization的Class文件之中并没有ConstClass类的符号引用入口，这两个类在编译成Class文件后就已不存在任何联系了。")])])]),a._v(" "),t("p",[a._v("接口的加载过程与类加载过程稍有不同，针对接口需要做一些特殊说明：接口也有初始化过程，这点与类是一致的，上面的代码都是"),t("strong",[a._v("用静态语句块“static{}”来输出初始化信息的")]),a._v("，而接口中不能使用“static{}”语句块，但编译器仍然会为接口生成“<clinit>()”类构造器[2]，用于初始化接口中所定义的成员变量。接口与类真正有所区别的是前面讲述的六种“有且仅有”需要触发初始化场景中的第三种：当一个类在初始化时，要求其父类全部都已经初始化过了，"),t("strong",[a._v("但是一个接口在初始化时，并不要求其父接口全部都完成了初始化，只有在真正使用到父接口的时候（如引用接口中定义的常量）才会初始化。")])]),a._v(" "),t("h2",{attrs:{id:"类加载的过程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类加载的过程"}},[a._v("#")]),a._v(" 类加载的过程")]),a._v(" "),t("h3",{attrs:{id:"加载-查找并加载类的二进制流"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#加载-查找并加载类的二进制流"}},[a._v("#")]),a._v(" 加载-查找并加载类的二进制流")]),a._v(" "),t("p",[a._v("在加载阶段，Java虚拟机需要完成以下三件事情：")]),a._v(" "),t("ol",[t("li",[t("p",[a._v("通过一个类的全限定名来获取定义此类的"),t("strong",[a._v("二进制字节流")]),a._v("。")])]),a._v(" "),t("li",[t("p",[a._v("将这个字节流所代表的"),t("strong",[a._v("静态存储结构转化为****方法区的运行时数据结构")]),a._v("。")])]),a._v(" "),t("li",[t("p",[a._v("在"),t("strong",[a._v("java堆内存")]),a._v("中生成一个代表这个类的java.lang.Class对象，"),t("strong",[a._v("作为方法区这个类的各种数据的访问入口")]),a._v("。")])])]),a._v(" "),t("p",[a._v("“通过一个类的全限定名来获取定义此类的二进制字节流”这条规则，它并没有指明二进制字节流必须得从某个Class文件中获取，确切地说是根本没有指明要从哪里获取、如何获取。如从zip压缩包读取（JAR,EAR,WAR），从网络中获取，运行时计算生成（动态代理技术）等。")]),a._v(" "),t("p",[a._v("加载阶段结束后，"),t("strong",[a._v("Java虚拟机外部的二进制字节流就按照虚拟机所设定的格式存储在方法区之中了")]),a._v("，方法区中的数据存储格式完全由虚拟机实现自行定义，《Java虚拟机规范》未规定此区域的具体数据结构。"),t("strong",[a._v("类型数据妥善安置在方法区之后，会在Java堆内存中实例化一个java.lang.Class类的对象，这个对象将作为程序访问方法区中的类型数据的外部接口。")])]),a._v(" "),t("h3",{attrs:{id:"验证-确保被加载类的准确性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#验证-确保被加载类的准确性"}},[a._v("#")]),a._v(" 验证-确保被加载类的准确性")]),a._v(" "),t("p",[a._v("验证是连接阶段的第一步，这一阶段的目的是**确保Class文件的字节流中包含的信息符合《Java虚拟机规范》的全部约束要求，**保证这些信息被当作代码运行后不会危害虚拟机自身的安全。")]),a._v(" "),t("p",[a._v("Java语言本身是相对安全的编程语言（起码对于C/C++来说是相对安全的），使用纯粹的Java代码无法做到诸如访问数组边界以外的数据、将一个对象转型为它并未实现的类型、跳转到不存在的代码行之类的事情，如果尝试这样去做了，编译器会毫不留情地抛出异常、拒绝编译。")]),a._v(" "),t("p",[a._v("但前面也曾说过，Class文件并不一定只能由Java源码编译而来，它可以使用包括靠键盘0和1直接在二进制编辑器中敲出Class文件在内的任何途径产生。"),t("strong",[a._v("上述Java代码无法做到的事情在字节码层面上都是可以实现的，至少语义上是可以表达出来的。Java虚拟机如果不检查输入的字节流，对其完全信任的话，")])]),a._v(" "),t("p",[a._v("验证阶段是非常重要的，这个阶段是否严谨，直接决定了Java虚拟机是否能承受恶意代码的攻击，从代码量和耗费的执行性能的角度上讲，验证阶段的工作量在虚拟机的类加载过程中占了相当大的比重。")]),a._v(" "),t("p",[a._v("从整体上看，验证阶段大致上会完成下面四个阶段的检验动作：文件格式验证、元数据验证、字节码验证和符号引用验证。")]),a._v(" "),t("ol",[t("li",[t("p",[a._v("文件格式验证：验证字节流是否符合"),t("strong",[a._v("Class文件格式")]),a._v("的规范，并且能被当前版本的虚拟机处理。比如是否以魔数0xCAFFBABE开头，主次版本是否在正确范围之内，常量池中的常量是否有不被支持的常量类型等。该验证阶段的主要目的是保证输入的字节流能正确地解析并存储于方法区之内，格式上符合描述一个Java类型信息的要求。"),t("strong",[a._v("这阶段的验证是基于二进制字节流进行的，只有通过了这个阶段的验证之后，这段字节流才被允许进入Java虚拟机内存的方法区中进行存储")]),a._v("，所以后面的三个验证阶段全部是基于方法区的存储结构上进行的，不会再直接读取、操作字节流了。")])]),a._v(" "),t("li",[t("p",[a._v("元数据验证：对字节码描述的信息进行"),t("strong",[a._v("语义分析")]),a._v("，以保证其描述的信息符合《Java语言规范》的要求。")]),a._v(" "),t("ol",[t("li",[t("p",[a._v("该类是否有父类，除了Object类外，所有的类都该有父类。")])]),a._v(" "),t("li",[t("p",[a._v("这个类的父类是否继承了不允许被继承的类（被final修饰的类）。")])]),a._v(" "),t("li",[t("p",[a._v("如果这个类不是抽象类，是否实现了其父类或接口之中要求实现的所有方法。")])]),a._v(" "),t("li",[t("p",[a._v("类中的字段、方法是否与父类产生矛盾（例如覆盖了父类的final字段，或者出现不符合规则的方法重载，例如方法参数都一致，但返回值类型却不同等）")])])])]),a._v(" "),t("li",[t("p",[a._v("字节码验证：第三阶段是整个验证过程中最复杂的一个阶段，主要目的是"),t("strong",[a._v("通过数据流分析和控制流分析，确定程序语义是合法的、符合逻辑的。"),t("strong",[a._v("在第二阶段对元数据信息中的数据类型校验完毕以后，这阶段就要")]),a._v("对类的方法体（Class文件中的Code属性）进行校验分析")]),a._v("，保证被校验类的方法在运行时不会做出危害虚拟机安全的行为。")]),a._v(" "),t("ol",[t("li",[t("p",[a._v("保证任意时刻操作数栈的数据类型与指令代码序列都能配合工作，例如不会出现类似于“在操作栈放置了一个int类型的数据，使用时却按long类型来加载入本地变量表中”这样的情况。")])]),a._v(" "),t("li",[t("p",[a._v("保证任何跳转指令都不会跳转到方法体以外的字节码指令上。")])]),a._v(" "),t("li",[t("p",[a._v("保证方法体中的类型转换总是有效的，例如可以把一个子类对象赋值给父类数据类型，这是安全的，但是把父类对象赋值给子类数据类型，甚至把对象赋值给与它毫无继承关系、完全不相干的一个数据类型，则是危险和不合法的。")])])])]),a._v(" "),t("li",[t("p",[a._v("符号引用验证：最后一个阶段的校验行为发生在虚拟机将符号引用转化为直接引用[3]的时候，这个转化动作将在连接的第三阶段——解析阶段中发生。符号引用验证"),t("strong",[a._v("可以看作是对类自身以外（常量池中的各种符号引用）的各类信息进行匹配性校验")]),a._v("，通俗来说就是，该类是否缺少或者被禁止访问它依赖的某些外部类、方法、字段等资源。符号引用验证的主要目的是确保解析行为能正常执行，如果无法通过符号引用验证，Java虚拟机将会抛出一个java.lang.IncompatibleClassChangeError的子类异常，典型的如：java.lang.IllegalAccessError、java.lang.NoSuchFieldError、"),t("strong",[a._v("java.lang.NoSuchMethodError等")]),a._v("。")]),a._v(" "),t("ol",[t("li",[t("p",[a._v("符号引用中通过字符串描述的全限定名是否能找到对应的类。")])]),a._v(" "),t("li",[t("p",[a._v("在指定类中是否存在符合方法的字段描述符及简单名称所描述的方法和字段。")])]),a._v(" "),t("li",[t("p",[a._v("符号引用中的类、字段、方法的可访问性（private、protected、public、<package>）是否可被当前类访问。")])])])])]),a._v(" "),t("h3",{attrs:{id:"准备-为类的静态变量分配内存并初始化为默认值"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#准备-为类的静态变量分配内存并初始化为默认值"}},[a._v("#")]),a._v(" 准备-为类的静态变量分配内存并初始化为默认值")]),a._v(" "),t("p",[a._v("准备阶段是正式"),t("strong",[a._v("为类中定义的变量（即静态变量，被static修饰的变量）分配内存并设置类变量初始值")]),a._v("的阶段，从概念上讲，这些变量所使用的内存都应当在方法区中进行分配，但必须注意到方法区本身是一个逻辑上的区域，"),t("strong",[a._v("在JDK 7及之前，HotSpot使用永久代来实现方法区时，实现是完全符合这种逻辑概念的；而在JDK 8及之后，类变量则会随着Class对象一起存放在Java堆中")]),a._v("，这时候“类变量在方法区”就完全是一种对逻辑概念的表述了。")]),a._v(" "),t("p",[a._v("关于准备阶段，还有两个容易产生混淆的概念笔者需要着重强调，首先是这时候进行内存分配的"),t("strong",[a._v("仅包括类变量，而不包括实例变量")]),a._v("，实例变量将会在对象实例化时随着对象一起分配在Java堆中。")]),a._v(" "),t("p",[a._v("其次是这里所说的初始值“通常情况”下是数据类型的零值，假设一个类变量的定义为："),t("code",[a._v("public static int value = 123;")]),a._v("那变量value在准备阶段过后的初始值为0而不是123，因为"),t("strong",[a._v("这时尚未开始执行任何Java方法，而把value赋值为123的putstatic指令是程序被编译后，存放于类构造器<clinit>()方法之中，所以把value赋值为123的动作要到****类的初始化阶段才会被执行。")])]),a._v(" "),t("p",[a._v("上面提到在“通常情况”下初始值是零值，那言外之意是相对的会有某些“特殊情况”：**如果类字段的字段属性表中存在ConstantValue属性，那在准备阶段变量值就会被初始化为ConstantValue属性所指定的初始值，**假设上面类变量value的定义修改为："),t("code",[a._v("public static final int value = 123;")]),a._v("编译时Javac将会为value生成ConstantValue属性，在准备阶段虚拟机就会根据Con-stantValue的设置将value赋值为123。")]),a._v(" "),t("h3",{attrs:{id:"解析-把类中的符号引用转换为直接引用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#解析-把类中的符号引用转换为直接引用"}},[a._v("#")]),a._v(" 解析-把类中的符号引用转换为直接引用")]),a._v(" "),t("p",[a._v("解析阶段是Java虚拟机"),t("strong",[a._v("将常量池内的符号引用替换为直接引用的过程")]),a._v("，符号引用在第6章讲解Class文件格式的时候已经出现过多次，在Class文件中它以CONSTANT_Class_info、CONSTANT_Fieldref_info、CONSTANT_Methodref_info等类型的常量出现。")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("符号引用（Symbolic References）：符号引用以一组符号来描述所引用的目标，**符号可以是任何形式的字面量，只要使用时能无歧义地定位到目标即可。符号引用与虚拟机实现的内存布局无关，引用的目标并不一定是已经加载到虚拟机内存当中的内容。**各种虚拟机实现的内存布局可以各不相同，但是它们能接受的符号引用必须都是一致的，因为符号引用的字面量形式明确定义在《Java虚拟机规范》的Class文件格式中。")])]),a._v(" "),t("li",[t("p",[a._v("直接引用（Direct References）：直接引用是可以直接指向目标的指针、相对偏移量或者是一个能间接定位到目标的句柄。**直接引用是和虚拟机实现的内存布局直接相关的，同一个符号引用在不同虚拟机实例上翻译出来的直接引用一般不会相同。**如果有了直接引用，那引用的目标必定已经在虚拟机的内存中存在。")])])]),a._v(" "),t("p",[a._v("《Java虚拟机规范》之中并未规定解析阶段发生的具体时间。只要求操作符号引用的字节码指令之前，先对它们所使用的符号引用进行解析。所以虚拟机实现可以根据需要来自行判断，到底是在类被加载器加载时就对常量池中的符号引用进行解析，还是等到一个符号引用将要被使用前才去解析它。")]),a._v(" "),t("p",[a._v("类似地，"),t("strong",[a._v("对方法或者字段的访问，也会在解析阶段中对它们的可访问性（public、protected、private、<package>）进行检查。")])]),a._v(" "),t("p",[a._v("解析动作主要针对类或接口、字段、类方法、接口方法、方法类型、方法句柄和调用点限定符这7类符号引用进行，分别对应于常量池的CONSTANT_Class_info、CON-STANT_Fieldref_info、CONSTANT_Methodref_info、CONSTANT_InterfaceMethodref_info、CONSTANT_MethodType_info、CONSTANT_MethodHandle_info、CONSTANT_Dyna-mic_info和CONSTANT_InvokeDynamic_info 8种常量类型。")]),a._v(" "),t("h3",{attrs:{id:"初始化-为类静态变量赋初始值-执行-clinit-方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#初始化-为类静态变量赋初始值-执行-clinit-方法"}},[a._v("#")]),a._v(" 初始化-为类静态变量赋初始值（执行<clinit>()方法）")]),a._v(" "),t("p",[a._v("直到初始化阶段，"),t("strong",[a._v("Java虚拟机才真正开始执行类中编写的Java程序代码，将主导权移交给应用程序")]),a._v("。")]),a._v(" "),t("p",[a._v("进行准备阶段时，静态变量已经赋过一次系统要求的初始零值，而在初始化阶段，则会根据程序员通过程序编码制定的主观计划去初始化类变量和其他资源。我们也可以从另外一种更直接的形式来表达："),t("strong",[a._v("初始化阶段就是执行类构造器<clinit>()方法的过程。")])]),a._v(" "),t("p",[a._v("<clinit>()方法是由编译器自动收集类中的所有"),t("strong",[a._v("类变量的赋值动作和静态语句块（static{}块）中的语句合并产生")]),a._v("的，编译器收集的顺序是由语句在源文件中出现的顺序决定的，静态语句块中只能访问到定义在静态语句块之前的变量，定义在它之后的变量，在前面的静态语句块可以赋值，但是不能访问。")]),a._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Test")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        i "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 给变量复制可以正常编译通过")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 这句编译器会提示“非法向前引用”")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),t("p",[a._v("<clinit>()方法与**类的构造函数（即在虚拟机视角中的实例构造器<init>()方法）"),t("strong",[a._v("不同，它")]),a._v("不需要显式地调用父类构造器，Java虚拟机会保证在子类的<clinit>()方法执行前，父类的<clinit>()方法已经执行完毕。**因此在Java虚拟机中第一个被执行的<clinit>()方法的类型肯定是java.lang.Object。")]),a._v(" "),t("p",[a._v("由于父类的<clinit>()方法先执行，也就意味着"),t("strong",[a._v("父类中定义的静态语句块要优先于子类的变量赋值操作")]),a._v("。")]),a._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Parent")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("A")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    \t"),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("A")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Sub")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("extends")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Parent")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("B")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("A")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" args"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Sub"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("B")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 字段B的值将会是2而不是1。")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),t("p",[a._v("<clinit>()方法对于类或接口来说并不是必需的，如果一个类中没有静态语句块，也没有对变量的赋值操作，那么编译器可以不为这个类生成<clinit>()方法。")]),a._v(" "),t("p",[a._v("接口中不能使用静态语句块，但仍然有变量初始化的赋值操作，因此接口与类一样都会生成<clinit>()方法。但接口与类不同的是，执行接口的<clinit>()方法不需要先执行父接口的<clinit>()方法，因为"),t("strong",[a._v("只有当父接口中定义的变量被使用时，父接口才会被初始化")]),a._v("。此外，接口的实现类在初始化时也一样不会执行接口的<clinit>()方法。")]),a._v(" "),t("p",[a._v("Java虚拟机必须保证一个类的<clinit>()方法在多线程环境中被正确地加锁同步，如果多个线程同时去初始化一个类，那么只会有其中一个线程去执行这个类的<clinit>()方法，其他线程都需要阻塞等待，直到活动线程执行完毕<clinit>()方法。")]),a._v(" "),t("h2",{attrs:{id:"类加载器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类加载器"}},[a._v("#")]),a._v(" 类加载器")]),a._v(" "),t("ol",[t("li",[t("p",[a._v("Java虚拟机设计团队有意"),t("strong",[a._v("把类加载阶段中的“通过一个类的全限定名来获取描述该类的二进制字节流”这个动作放到Java虚拟机外部去实现")]),a._v("，以便让应用程序自己决定如何去获取所需的类。实现这个动作的代码被称为“类加载器”（Class Loader）。")])]),a._v(" "),t("li",[t("p",[a._v("类加载器可以说是Java语言的一项创新，它是早期Java语言能够快速流行的重要原因之一。")])])]),a._v(" "),t("h3",{attrs:{id:"类与类加载器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类与类加载器"}},[a._v("#")]),a._v(" 类与类加载器")]),a._v(" "),t("p",[a._v("类加载器虽然只用于实现类的加载动作，但它在Java程序中起到的作用却远超类加载阶段。**对于任意一个类，都必须由加载它的类加载器和这个类本身一起共同确立其在Java虚拟机中的唯一性，每一个类加载器，都拥有一个独立的类名称空间。**这句话可以表达得更通俗一些：比较两个类是否“相等”，只有在这两个类是由同一个类加载器加载的前提下才有意义，否则，即使这两个类来源于同一个Class文件，被同一个Java虚拟机加载，只要加载它们的类加载器不同，那这两个类就必定不相等。")]),a._v(" "),t("p",[a._v("这里所指的“相等”，包括代表类的Class对象的equals()方法、isAssignableFrom()方法、isInstance()方法的返回结果，也包括了使用instanceof关键字做对象所属关系判定等各种情况。")]),a._v(" "),t("h3",{attrs:{id:"双亲委派模型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#双亲委派模型"}},[a._v("#")]),a._v(" 双亲委派模型")]),a._v(" "),t("p",[a._v("站在Java虚拟机的角度来看，只存在两种不同的类加载器：一种是"),t("strong",[a._v("启动类加载器")]),a._v("（Bootstrap ClassLoader），这个类加载器使"),t("strong",[a._v("用C++语言实现")]),a._v("[1]，是虚拟机自身的一部分；另外一种就是"),t("strong",[a._v("其他所有的类加载器")]),a._v("，这些类加载器都"),t("strong",[a._v("由Java语言")]),a._v("实现，"),t("strong",[a._v("独立存在于虚拟机外部，并且全都继承自抽象类java.lang.ClassLoader。")])]),a._v(" "),t("p",[a._v("自JDK 1.2以来，Java一直保持着三层类加载器、双亲委派的类加载架构。")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://walegarrett-image-1304556108.cos.ap-chengdu.myqcloud.com/markdown_img/202203231605811.png",alt:"img"}})]),a._v(" "),t("h4",{attrs:{id:"启动类加载器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#启动类加载器"}},[a._v("#")]),a._v(" 启动类加载器")]),a._v(" "),t("p",[a._v("这个类加载器负责加载"),t("strong",[a._v("存放在<JAVA_HOME>\\lib目录")]),a._v("，或者被-Xbootclasspath参数所指定的路径中存放的，而且是"),t("strong",[a._v("Java虚拟机能够识别的")]),a._v("（按照文件名识别，如rt.jar、tools.jar，名字不符合的类库即使放在lib目录中也不会被加载）类库加载到虚拟机的内存中。")]),a._v(" "),t("p",[a._v("启动类加载器无法被Java程序直接引用，用户在编写自定义类加载器时，如果需要把加载请求委派给引导类加载器去处理，那直接使用null代替即可。")]),a._v(" "),t("h4",{attrs:{id:"扩展类加载器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#扩展类加载器"}},[a._v("#")]),a._v(" 扩展类加载器")]),a._v(" "),t("p",[a._v("这个类加载器是在类sun.misc.Launcher$ExtClassLoader中以Java代码的形式实现的。它负责"),t("strong",[a._v("加载<JAVA_HOME>\\lib\\ext目录")]),a._v("中，或者被java.ext.dirs系统变量所指定的路径中所有的类库。")]),a._v(" "),t("p",[a._v("根据“扩展类加载器”这个名称，就可以推断出这是一种Java系统类库的扩展机制，JDK的开发团队允许用户将具有通用性的类库放置在ext目录里以扩展Java SE的功能，在JDK9之后，这种扩展机制被模块化带来的天然的扩展能力所取代。由于扩展类加载器是由Java代码实现的，开发者可以直接在程序中使用扩展类加载器来加载Class文件。")]),a._v(" "),t("h4",{attrs:{id:"应用程序类加载器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#应用程序类加载器"}},[a._v("#")]),a._v(" 应用程序类加载器")]),a._v(" "),t("p",[a._v("这个类加载器由sun.misc.Launcher$AppClassLoader来实现。由于应用程序类加载器是ClassLoader类中的getSystem-ClassLoader()方法的返回值，所以有些场合中也称它为“"),t("strong",[a._v("系统类加载器")]),a._v("”。")]),a._v(" "),t("p",[a._v("它负责"),t("strong",[a._v("加载用户类路径（ClassPath）上所有的类库")]),a._v("，开发者同样可以直接在代码中使用这个类加载器。如果应用程序中没有自定义过自己的类加载器，一般情况下这个就是程序中默认的类加载器。")]),a._v(" "),t("h4",{attrs:{id:"双亲委派"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#双亲委派"}},[a._v("#")]),a._v(" 双亲委派")]),a._v(" "),t("p",[a._v("双亲委派模型要求除了顶层的启动类加载器外，其余的类加载器都应有自己的父类加载器。"),t("strong",[a._v("不过这里类加载器之间的父子关系一般不是以继承（Inheritance）的关系来实现的，而是通常使用组合（Composition）关系来复用父加载器的代码。")])]),a._v(" "),t("p",[a._v("双亲委派模型的"),t("strong",[a._v("工作过程")]),a._v("是：如果一个类加载器收到了类加载的请求，它首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器去完成，每一个层次的类加载器都是如此，因此所有的加载请求最终都应该传送到最顶层的启动类加载器中，只有当父加载器反馈自己无法完成这个加载请求（它的搜索范围中没有找到所需的类）时，子加载器才会尝试自己去完成加载。")]),a._v(" "),t("p",[a._v("使用双亲委派模型来组织类加载器之间的关系，一个显而易见的好处就是Java中的类随着它的类加载器一起具备了一种带有优先级的层次关系。例如类java.lang.Object，它存放在rt.jar之中，无论哪一个类加载器要加载这个类，最终都是委派给处于模型最顶端的启动类加载器进行加载，"),t("strong",[a._v("因此Object类在程序的各种类加载器环境中都能够保证是同一个类")]),a._v("。反之，如果没有使用双亲委派模型，都由各个类加载器自行去加载的话，如果用户自己也编写了一个名为java.lang.Object的类，并放在程序的ClassPath中，那系统中就会出现多个不同的Object类，Java类型体系中最基础的行为也就无从保证，应用程序将会变得一片混乱。")]),a._v(" "),t("p",[a._v("双亲委派模型对于"),t("strong",[a._v("保证Java程序的稳定运作极为重要")]),a._v("，但它的实现却异常简单，用以实现双亲委派的代码只有短短十余行，全部集中在java.lang.ClassLoader的loadClass()方法之中。")]),a._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("protected")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("synchronized")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Class")]),a._v("\\"),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("?")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("loadClass")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("boolean")]),a._v(" resolve"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("throws")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ClassNotFoundException")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 首先，检查请求的类是否已经被加载过了")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Class")]),a._v(" c "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("findLoadedClass")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("c "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("==")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("try")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("parent "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("!=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n                c "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" parent"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("loadClass")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("false")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n            "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("else")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n                c "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("findBootstrapClassOrNull")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n            "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("catch")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ClassNotFoundException")]),a._v(" e"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n            "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 如果父类加载器抛出ClassNotFoundException")]),a._v("\n            "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 说明父类加载器无法完成加载请求")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("c "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("==")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n            "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 在父类加载器无法加载时")]),a._v("\n            "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 再调用本身的findClass方法来进行类加载")]),a._v("\n            c "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("findClass")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("resolve"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    \t"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("resolveClass")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("c"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" c"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),t("p",[a._v("这段代码的逻辑清晰易懂：先检查请求加载的类型是否已经被加载过，若没有则调用父加载器的loadClass()方法，若父加载器为空则默认使用启动类加载器作为父加载器。假如父类加载器加载失败，抛出ClassNotFoundException异常的话，才调用自己的findClass()方法尝试进行加载。")])])}),[],!1,null,null,null);s.default=e.exports}}]);