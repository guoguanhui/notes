(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{588:function(t,e,_){"use strict";_.r(e);var v=_(14),r=Object(v.a)({},(function(){var t=this,e=t.$createElement,_=t._self._c||e;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h2",{attrs:{id:"queue"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#queue"}},[t._v("#")]),t._v(" Queue")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://walegarrett-image-1304556108.cos.ap-chengdu.myqcloud.com/markdown_img/202203221048175.png",alt:"img"}})]),t._v(" "),_("p",[t._v("Queue_接口继承自Collection接口，除了最基本的Collection的方法之外，它还支持额外的insertion, extraction和inspection操作。这里有两组格式，共6个方法，一组是抛出异常的实现；另外一组是返回值的实现(没有则返回null)。")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th"),t._v(" "),_("th",[t._v("Throws exception")]),t._v(" "),_("th",[t._v("Returns special value")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("Insert")]),t._v(" "),_("td",[t._v("add(e)")]),t._v(" "),_("td",[t._v("offer(e)")])]),t._v(" "),_("tr",[_("td",[t._v("Remove")]),t._v(" "),_("td",[t._v("remove()")]),t._v(" "),_("td",[t._v("poll()")])]),t._v(" "),_("tr",[_("td",[t._v("Examine")]),t._v(" "),_("td",[t._v("element()")]),t._v(" "),_("td",[t._v("peek()")])])])]),t._v(" "),_("h3",{attrs:{id:"priorityqueue"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#priorityqueue"}},[t._v("#")]),t._v(" PriorityQueue")]),t._v(" "),_("ol",[_("li",[_("p",[_("em",[t._v("PriorityQueue")]),t._v("，即优先队列。"),_("strong",[t._v("优先队列的作用是能保证每次取出的元素都是队列中权值最小的")]),t._v("(Java的优先队列每次取最小元素，C++的优先队列每次取最大元素)。这里牵涉到了大小关系，**元素大小的评判可以通过元素本身的自然顺序(natural ordering)，也可以通过构造时传入的比较器(Comparator，类似于C++的仿函数)。")])]),t._v(" "),_("li",[_("p",[t._v("Java中_PriorityQueue_实现了_Queue_接口，不允许放入null元素；其通过堆实现，具体说是通过完全二叉树("),_("em",[t._v("complete binary tree")]),t._v(")实现的"),_("strong",[t._v("小顶堆")]),t._v("(任意一个非叶子节点的权值，都不大于其左右子节点的权值)，也就意味着可以通过数组来作为_PriorityQueue_的底层实现。")])])]),t._v(" "),_("h2",{attrs:{id:"deque"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#deque"}},[t._v("#")]),t._v(" Deque")]),t._v(" "),_("ol",[_("li",[t._v('Deque是"double ended queue", 表示双向的队列，英文读作"deck". Deque 继承自 Queue接口，除了支持Queue的方法之外，还支持insert, remove和examine操作，由于Deque是双向的，所以可以对队列的头和尾都进行操作，它同时也支持两组格式，一组是抛出异常的实现；另外一组是返回值的实现(没有则返回null)。共12个方法如下:')])]),t._v(" "),_("table",[_("thead",[_("tr",[_("th"),t._v(" "),_("th",[t._v("First Element - Head")]),t._v(" "),_("th"),t._v(" "),_("th",[t._v("Last Element - Tail")]),t._v(" "),_("th")])]),t._v(" "),_("tbody",[_("tr",[_("td"),t._v(" "),_("td",[t._v("Throws exception")]),t._v(" "),_("td",[t._v("Special value")]),t._v(" "),_("td",[t._v("Throws exception")]),t._v(" "),_("td",[t._v("Special value")])]),t._v(" "),_("tr",[_("td",[t._v("Insert")]),t._v(" "),_("td",[t._v("addFirst(e)")]),t._v(" "),_("td",[t._v("offerFirst(e)")]),t._v(" "),_("td",[t._v("addLast(e)")]),t._v(" "),_("td",[t._v("offerLast(e)")])]),t._v(" "),_("tr",[_("td",[t._v("Remove")]),t._v(" "),_("td",[t._v("removeFirst()")]),t._v(" "),_("td",[t._v("pollFirst()")]),t._v(" "),_("td",[t._v("removeLast()")]),t._v(" "),_("td",[t._v("pollLast()")])]),t._v(" "),_("tr",[_("td",[t._v("Examine")]),t._v(" "),_("td",[t._v("getFirst()")]),t._v(" "),_("td",[t._v("peekFirst()")]),t._v(" "),_("td",[t._v("getLast()")]),t._v(" "),_("td",[t._v("peekLast()")])])])]),t._v(" "),_("ol",{attrs:{start:"2"}},[_("li",[t._v("下表列出了_Deque_与_Queue_相对应的接口:")])]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("Queue Method")]),t._v(" "),_("th",[t._v("Equivalent Deque Method")]),t._v(" "),_("th",[t._v("说明")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("add(e)")]),t._v(" "),_("td",[t._v("addLast(e)")]),t._v(" "),_("td",[t._v("向队尾插入元素，失败则抛出异常")])]),t._v(" "),_("tr",[_("td",[t._v("offer(e)")]),t._v(" "),_("td",[t._v("offerLast(e)")]),t._v(" "),_("td",[t._v("向队尾插入元素，失败则返回false")])]),t._v(" "),_("tr",[_("td",[t._v("remove()")]),t._v(" "),_("td",[t._v("removeFirst()")]),t._v(" "),_("td",[t._v("获取并删除队首元素，失败则抛出异常")])]),t._v(" "),_("tr",[_("td",[t._v("poll()")]),t._v(" "),_("td",[t._v("pollFirst()")]),t._v(" "),_("td",[t._v("获取并删除队首元素，失败则返回null")])]),t._v(" "),_("tr",[_("td",[t._v("element()")]),t._v(" "),_("td",[t._v("getFirst()")]),t._v(" "),_("td",[t._v("获取但不删除队首元素，失败则抛出异常")])]),t._v(" "),_("tr",[_("td",[t._v("peek()")]),t._v(" "),_("td",[t._v("peekFirst()")]),t._v(" "),_("td",[t._v("获取但不删除队首元素，失败则返回null")])])])]),t._v(" "),_("ol",{attrs:{start:"3"}},[_("li",[t._v("下表列出了_Deque_与_Stack_对应的接口:")])]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("Stack Method")]),t._v(" "),_("th",[t._v("Equivalent Deque Method")]),t._v(" "),_("th",[t._v("说明")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("push(e)")]),t._v(" "),_("td",[t._v("addFirst(e)")]),t._v(" "),_("td",[t._v("向栈顶插入元素，失败则抛出异常")])]),t._v(" "),_("tr",[_("td",[t._v("无")]),t._v(" "),_("td",[t._v("offerFirst(e)")]),t._v(" "),_("td",[t._v("向栈顶插入元素，失败则返回false")])]),t._v(" "),_("tr",[_("td",[t._v("pop()")]),t._v(" "),_("td",[t._v("removeFirst()")]),t._v(" "),_("td",[t._v("获取并删除栈顶元素，失败则抛出异常")])]),t._v(" "),_("tr",[_("td",[t._v("无")]),t._v(" "),_("td",[t._v("pollFirst()")]),t._v(" "),_("td",[t._v("获取并删除栈顶元素，失败则返回null")])]),t._v(" "),_("tr",[_("td",[t._v("peek()")]),t._v(" "),_("td",[t._v("peekFirst()")]),t._v(" "),_("td",[t._v("获取但不删除栈顶元素，失败则抛出异常")])]),t._v(" "),_("tr",[_("td",[t._v("无")]),t._v(" "),_("td",[t._v("peekFirst()")]),t._v(" "),_("td",[t._v("获取但不删除栈顶元素，失败则返回null")])])])]),t._v(" "),_("h3",{attrs:{id:"arraydeque"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#arraydeque"}},[t._v("#")]),t._v(" ArrayDeque")]),t._v(" "),_("p",[t._v("ArrayDeque_底层通过数组实现，为了满足可以同时在数组两端插入或删除元素的需求，该数组还必须是循环的，即循环数组(circular array)，也就是说数组的任何一点都可能被看作起点或者终点。ArrayDeque是非线程安全的(not thread-safe)，当多个线程同时使用的时候，需要程序员手动同步；另外，该容器不允许放入null元素。")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://walegarrett-image-1304556108.cos.ap-chengdu.myqcloud.com/markdown_img/202203221048349.png",alt:"img"}})])])}),[],!1,null,null,null);e.default=r.exports}}]);