(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{599:function(t,a,s){"use strict";s.r(a);var n=s(14),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"前言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),s("p",[t._v("我相信，只要你用过Spring Boot，就会对这样一个现象非常的好奇：")]),t._v(" "),s("p",[t._v("引入一个组件依赖，加个配置，这个组件就生效了。")]),t._v(" "),s("p",[t._v("举个例子来说，比如我们常用的Redis, 在Spring Boot中的使用方式是这样的：")]),t._v(" "),s("h3",{attrs:{id:"_1-引入依赖"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-引入依赖"}},[t._v("#")]),t._v(" 1. 引入依赖")]),t._v(" "),s("div",{staticClass:"language-xml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-xml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("dependency")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("groupId")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("org.springframework.boot"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("groupId")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("artifactId")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("spring-boot-starter-data-redis"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("artifactId")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("dependency")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),s("h3",{attrs:{id:"_2-编写配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-编写配置"}},[t._v("#")]),t._v(" 2. 编写配置")]),t._v(" "),s("div",{staticClass:"language-yaml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yaml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("spring")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("redis")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("database")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("timeout")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 5000ms\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("host")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 127.0.0.1\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("port")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6379")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("password")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("123456")]),t._v("\n")])])]),s("p",[t._v("好了，接下来只需要使用时注入RedisTemplate就能使用了，像这样：")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Autowired")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RedisTemplate")]),t._v(" redisTemplate"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("这期间，我们做了什么嘛？我们什么也没有做，那么，这个RedisTemplate对象是怎么注入到Spring容器中的呢？")]),t._v(" "),s("p",[t._v("接下来，就让我们带着这样的疑问逐步剖析其中的原理，这个原理就叫做自动装配。")]),t._v(" "),s("h2",{attrs:{id:"spi机制-服务提供者接口"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#spi机制-服务提供者接口"}},[t._v("#")]),t._v(" SPI机制-服务提供者接口")]),t._v(" "),s("p",[s("strong",[t._v("SPI ，全称为 Service Provider Interface(服务提供者接口)，是一种服务发现机制。它通过在classpath路径下的META-INF/services文件夹查找文件，自动加载文件中所定义的类。")])]),t._v(" "),s("p",[t._v("参考：https://segmentfault.com/a/1190000040510401")]),t._v(" "),s("h2",{attrs:{id:"springboot自动装配"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#springboot自动装配"}},[t._v("#")]),t._v(" SpringBoot自动装配")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://walegarrett-image-1304556108.cos.ap-chengdu.myqcloud.com/markdown_img/202203251702544.png",alt:"img"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://walegarrett-image-1304556108.cos.ap-chengdu.myqcloud.com/markdown_img/202203251702155.png",alt:"img"}})]),t._v(" "),s("p",[t._v("既然"),s("code",[t._v("Springboot")]),t._v("尽管这么好用，但是作为一个使用者，我们还是比较好奇它是怎么帮我们实现开箱即用的。"),s("code",[t._v("Spring Boot")]),t._v("有一个全局配置文件："),s("code",[t._v("application.properties或application.yml")]),t._v("。在这个全局文件里面可以配置各种各样的参数比如你想改个端口啦"),s("code",[t._v("server.port")]),t._v(" 或者想调整下日志的级别啦通通都可以配置。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://walegarrett-image-1304556108.cos.ap-chengdu.myqcloud.com/markdown_img/202203251702943.png",alt:"img"}})]),t._v(" "),s("p",[t._v("这么多属性，这些属性在项目是怎么起作用的呢？"),s("code",[t._v("SpringBoot")]),t._v("项目看下来啥配置也没有，配置”（"),s("code",[t._v("application.properties或application.yml")]),t._v("除外），既 然从配置上面找不到突破口，那么我们就只能从启动类上面找入口了。启动类也就一个光秃秃的一个"),s("code",[t._v("main")]),t._v("方法，类上面仅有一个注"),s("code",[t._v("SpringBootApplication")]),t._v("这个注解是"),s("code",[t._v("Spring Boot")]),t._v("项目必不可少的注解。那么自动配置原理一定和这个注解有着千丝万缕的联系！我们下面来一起看看这个注解吧。"),s("strong",[t._v("「@SpringBootApplication注解」")])]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Target")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ElementType")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("TYPE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Retention")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RetentionPolicy")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("RUNTIME"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Documented")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Inherited")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@SpringBootConfiguration")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@EnableAutoConfiguration")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@ComponentScan")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("excludeFilters "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Filter")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("type "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("FilterType")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("CUSTOM"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" classes "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TypeExcludeFilter")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Filter")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("type "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("FilterType")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("CUSTOM"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" classes "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AutoConfigurationExcludeFilter")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@interface")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SpringBootApplication")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n")])])]),s("p",[t._v("这里最上面四个注解的话没啥好说的，基本上自己实现过自定义注解的话，都知道分别是什么意思。")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("@SpringBootConfiguration")]),t._v("继承自"),s("code",[t._v("@Configuration")]),t._v("，二者功能也一致，标注当前类是配置类。")]),t._v(" "),s("li",[s("code",[t._v("@ComponentScan")]),t._v("用于类或接口上主要是指定扫描路径，跟Xml里面的``配置一样。"),s("code",[t._v("springboot")]),t._v("如果不写这个扫描路径的话，默认就是启动类的路径。")]),t._v(" "),s("li",[s("code",[t._v("@EnableAutoConfiguration")])])]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Target")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ElementType")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("TYPE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Retention")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RetentionPolicy")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("RUNTIME"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Documented")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Inherited")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@AutoConfigurationPackage")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Import")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AutoConfigurationImportSelector")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@interface")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("EnableAutoConfiguration")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n")])])]),s("p",[t._v("这个注解我们重点看下"),s("code",[t._v("AutoConfigurationImportSelector")]),t._v("这个类"),s("code",[t._v("getCandidateConfigurations")]),t._v("这个方法里面通过"),s("code",[t._v("SpringFactoriesLoader.loadFactoryNames()")]),t._v("扫描所有具有"),s("code",[t._v("META-INF/spring.factories")]),t._v("的"),s("code",[t._v("jar")]),t._v("包（ spring.factories 我们可以理解成 "),s("code",[t._v("Spring Boot")]),t._v(" 自己的 "),s("code",[t._v("SPI")]),t._v(" 机制）。"),s("code",[t._v("spring-boot-autoconfigure-x.x.x.x.jar")]),t._v("里就有一个spring.factories文件。"),s("code",[t._v("spring.factories")]),t._v("文件由一组一组的"),s("code",[t._v("Key = value")]),t._v("的形式，其中一个"),s("code",[t._v("key")]),t._v("是EnableAutoConfiguration类的全类名，而它的value是一个以"),s("code",[t._v("AutoConfiguration")]),t._v("结尾的类名的列表，有"),s("code",[t._v("redis、mq")]),t._v("等这些类名以逗号分隔。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://walegarrett-image-1304556108.cos.ap-chengdu.myqcloud.com/markdown_img/202203251702697.png",alt:"img"}})]),t._v(" "),s("p",[t._v("我们在回到"),s("code",[t._v("getAutoConfigurationEntry")]),t._v("这个方法当执行完"),s("code",[t._v("getCandidateConfigurations")]),t._v("这个方法的时候我们可以看到此时总共加载了"),s("code",[t._v("127")]),t._v("个自动配置类。")]),t._v(" "),s("p",[t._v("这些类难道都要加载进去吗？"),s("code",[t._v("springboot")]),t._v("还是没有那么傻的，它提倡的话是按需加载。")]),t._v(" "),s("ul",[s("li",[t._v("它会去掉重复的类")]),t._v(" "),s("li",[t._v("过滤掉我们配置了"),s("code",[t._v("exclude")]),t._v("注解的类下面配置就会过滤掉"),s("code",[t._v("RestTemplateAutoConfiguration")]),t._v("这个类")]),t._v(" "),s("li",[t._v("经过上面的处理，剩下的这些自动配置的类如果要起作用的话，是需要满足一定的条件的。这些条件的满足的话"),s("code",[t._v("spring boot")]),t._v("是通过条件注解来实现的。")])]),t._v(" "),s("p",[t._v("❝@ConditionalOnBean：当容器里有指定Bean的条件下 @ConditionalOnClass：当类路径下有指定的类的条件下 @ConditionalOnExpression：基于SpEL表达式为true的时候作为判断条件才去实例化  @ConditionalOnJava：基于JVM版本作为判断条件 @ConditionalOnJndi：在JNDI存在的条件下查找指定的位置 @ConditionalOnMissingBean：当容器里没有指定Bean的情况下 @ConditionalOnMissingClass：当容器里没有指定类的情况下  @ConditionalOnWebApplication：当前项目是Web项目的条件下  @ConditionalOnNotWebApplication：当前项目不是Web项目的条件下  @ConditionalOnProperty：指定的属性是否有指定的值 @ConditionalOnResource：类路径是否有指定的值 @ConditionalOnOnSingleCandidate：当指定Bean在容器中只有一个，或者有多个但是指定首选的Bean ❞")]),t._v(" "),s("p",[t._v("这些注解都组合了"),s("code",[t._v("@Conditional")]),t._v("注解，只是使用了不同的条件组合最后为true时才会去实例化需要实例化的类，否则忽略过滤掉。我们在回到代码可以看到经过了条件判断过滤后我们剩下符合条件的自动配置类只剩23个了。其他的都是因为不满足条件注解而被过滤了。")]),t._v(" "),s("p",[t._v("如果我们想知道哪些自动配置类被过滤了，是由于什么原因被过滤了，以及加载了哪些类等。"),s("code",[t._v("spring boot")]),t._v("都为我们记录了日志。")]),t._v(" "),s("p",[t._v("这里就截取了部分日志。总共分别有下面四部分日志：")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("Positive matches")]),t._v("："),s("code",[t._v("@Conditional")]),t._v("条件为真，配置类被Spring容器加载。")]),t._v(" "),s("li",[s("code",[t._v("Negative matches:")]),t._v(" "),s("code",[t._v("@Conditional")]),t._v("条件为假，配置类未被Spring容器加载。")]),t._v(" "),s("li",[s("code",[t._v("Exclusions")]),t._v("：我们明确了不需要加载的类。比如在上面启动类配置的"),s("code",[t._v("RestTemplateAutoConfiguration")]),t._v("类")]),t._v(" "),s("li",[s("code",[t._v("Unconditional classes")]),t._v("：自动配置类不包含任何类级别的条件，也就是说，类始终会被自动加载。")])]),t._v(" "),s("h3",{attrs:{id:"自动配置生效"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#自动配置生效"}},[t._v("#")]),t._v(" "),s("strong",[t._v("自动配置生效")])]),t._v(" "),s("p",[t._v("我们以"),s("code",[t._v("ServletWebServerFactoryAutoConfiguration")]),t._v("配置类为例，解释一下全局配置文件中的属性如何生效，比如："),s("code",[t._v("server.port=88")]),t._v("，是如何生效的（当然不配置也会有默认值，这个默认值来自于"),s("code",[t._v("org.apache.catalina.startup.Tomcat")]),t._v("）。")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 标记为配置类")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Configuration")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("proxyBeanMethods "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@AutoConfigureOrder")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Ordered")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("HIGHEST_PRECEDENCE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果有ServletRequest.class 才会生效")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@ConditionalOnClass")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ServletRequest")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@ConditionalOnWebApplication")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("type "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Type")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("SERVLET"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 把@ConfigurationProperties注解的类注入为Spring容器的Bean。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@EnableConfigurationProperties")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ServerProperties")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Import")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ServletWebServerFactoryAutoConfiguration"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("BeanPostProcessorsRegistrar")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ServletWebServerFactoryConfiguration"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("EmbeddedTomcat")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ServletWebServerFactoryConfiguration"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("EmbeddedJetty")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ServletWebServerFactoryConfiguration"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("EmbeddedUndertow")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ServletWebServerFactoryAutoConfiguration")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n")])])]),s("p",[t._v("我们可以发现"),s("code",[t._v("EnableConfigurationProperties")]),t._v("注解里面配置的"),s("code",[t._v("ServerProperties.class")])]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@ConfigurationProperties")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("prefix "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"server"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ignoreUnknownFields "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ServerProperties")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n  * Server HTTP port.\n  */")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),t._v(" port"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("在这个类上有一个注解："),s("code",[t._v("@ConfigurationProperties")]),t._v("，它的作用就是从配置文件中绑定属性到对应的bean上(也就是把我们"),s("code",[t._v("application.properties")]),t._v("对应的server.port映射到"),s("code",[t._v("ServerProperties")]),t._v(" 类中的"),s("code",[t._v("port")]),t._v("属性)而@"),s("code",[t._v("EnableConfigurationProperties")]),t._v("这个注解就是把已经绑定了属性的"),s("code",[t._v("bean")]),t._v("（"),s("code",[t._v("ServerProperties")]),t._v("）注入到"),s("code",[t._v("spring")]),t._v("容器中（相当于@"),s("code",[t._v("Component")]),t._v("注解一样）。所有在配置文件中能配置的属性都是在"),s("code",[t._v("xxxxPropertites")]),t._v("类中封装着，配置文件能配置什么就可以参照某个功能对应的这个属性类。到现在为止应该能回答文章开头的那个问题了，面试的时候应该不需要回答的这么详细可以参考下以下答案：")]),t._v(" "),s("p",[s("strong",[t._v("Spring Boot启动的时候会通过@EnableAutoConfiguration注解找到META-INF/spring.factories配置文件中的所有自动配置类，并对其进行加载，而这些自动配置类都是以AutoConfiguration结尾来命名的，它实际上就是一个JavaConfig形式的Spring容器配置类，它能通过以Properties结尾命名的类中取得在全局配置文件中配置的属性如：server.port，而XxxxProperties类是通过@ConfigurationProperties注解与全局配置文件中对应的属性进行绑定的。")])]),t._v(" "),s("h3",{attrs:{id:"总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" "),s("strong",[t._v("总结")])]),t._v(" "),s("ul",[s("li",[s("code",[t._v("SpringBoot")]),t._v("启动会加载大量的自动配置类（通过“"),s("code",[t._v("SPI")]),t._v("”的方式），然后会根据条件注解保留一些需要的类。")]),t._v(" "),s("li",[t._v("我们新引入一个组件，可以先看看springBoot是否已经有默认的提供。")]),t._v(" "),s("li",[s("code",[t._v("SpringBoot")]),t._v("基本实现了“零配置“，并且开箱即用。")])]),t._v(" "),s("h2",{attrs:{id:"参考"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[t._v("#")]),t._v(" 参考")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://segmentfault.com/a/1190000040510401",target:"_blank",rel:"noopener noreferrer"}},[t._v("看完就会的SpringBoot自动装配原理 - SegmentFault 思否"),s("OutboundLink")],1)])])}),[],!1,null,null,null);a.default=e.exports}}]);